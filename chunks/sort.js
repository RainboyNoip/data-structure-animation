webpackJsonpdsa([2],{6:function(e,t,n){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},7:function(e,t,n){e.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},23:function(e,t,n){function r(){E=v(k),s(0,k.length-1),k=E}function s(e,t){d(e,t),h();var n,r,a,i,o;if(y(8,1),e==t)return y(9,1),void d();for(y(11,1),n=e,y(12,1),r=e+Math.floor((t-e+1)/2),i=r,h(n,r),y(13,1),s(n,r-1),y(14,1),s(r,t),f(i),y(15,1),o=[],y(16,1),a=0;y(17,1),i>n&&t>=r;)h(n,r),y(18,1),c(n,r),k[n]<=k[r]?(y(19,1),o[a]=k[n],m(n,e+a),c(),y(20,1),n++):(y(22,1),o[a]=k[r],m(r,e+a),c(),y(23,1),r++),h(n,r),y(25,1),a++;for(;y(27,1),i>n;)h(n,r),y(28,1),o[a]=k[n],m(n,e+a),y(29,1),a++,y(30,1),n++;for(h(n,r);y(32,1),t>=r;)h(n,r),y(33,1),o[a]=k[r],m(r,e+a),y(34,1),a++,y(35,1),r++;for(h(),n=e,a=0;y(37,1),t>=n;++n,++a)y(38,1),k[n]=o[a],m();y(40,1),d(),f()}function a(){E=v(k),o(0,k.length-1),l(),k=E}function o(e,t){d(e,t),h();var n,r,s;if(y(45,1),e>=t)return y(46,1),d(),void(e===t&&l(e));for(y(48,1),n=e,f(e+1),y(49,1),r=t,h(n,r);y(50,1),r>n;){for(;y(51,1),r>n&&(c(e,r),k[e]<=k[r]);)y(52,1),r--,h(n,r),c();for(;y(54,1),r>n&&(c(e,n),k[e]>=k[n]);)y(55,1),n++,h(n,r),c();y(57,1),s=k[n],k[n]=k[r],k[r]=s,p(n,r),c()}y(59,1),s=k[e],k[e]=k[r],k[r]=s,p(e,r),f(),l(r),y(60,1),o(e,r-1),y(61,1),o(r+1,t),d()}function c(e,t){void 0===e?_.cf=[]:_.cf=[{i:u(e),j:u(t)}]}function l(e){void 0===e?_.fin=[]:_.fin.push(u(e))}function p(e,t){bi=u(e),bj=u(t),A[e]=bj,_.mp[bi]=t,A[t]=bi,_.mp[bj]=e}function u(e){return 0===A[e]?0:A[e]||e}function f(e){void 0===e?_.mid=[]:_.mid=[e]}function h(){void 0===i?_.pt=[]:_.pt=Array.prototype.slice.call(arguments)}function d(e,t){void 0===e?_.bg.pop():_.bg.push([e,t])}function m(e,t){void 0===e?(e=_.dn[0],A[_.mp[e]]=e,_.dn.shift()):(e=u(e),_.dn.push(e),_.mp[e]=t)}function y(e,t,n){1===t&&(lastStatus=_.clone()),x.push({status:lastStatus,line:e,animation:n,id:w}),w++}function g(){0===x.length?0:x[x.length-1].line;y(165,1)}var v=n(4),x=[],w=0,_={},b=0,k=[],E=[],A={};_.clone=function(){return{arr:E,cf:v(this.cf),fin:v(this.fin),mid:v(this.mid),bg:v(this.bg),pt:v(this.pt),dn:v(this.dn),mp:v(this.mp)}},_.init=function(e){A=[],this.cf=[],this.fin=[],this.mid=[],this.bg=[],this.pt=[],this.dn=[],this.mp={}},lastStatus={},e.exports={getInitialDescriptions:function(){this.initialize(!0);var e=11,t=[];for(i=0;i<e;++i)t.push(Math.ceil(100*Math.random()));return this.run("qsort",t.join(" "))},initialize:function(e){return x=[],w=0,b=0,_.init(e),lastStatus=_.clone(),this},msort:r,qsort:a,run:function(e,t){var n=t.split(" ").map(function(e){return parseInt(e)}).filter(function(e){return e>0});return 0!==n.length&&(k=n),this.initialize()[e](),g(),{frames:x,others:{}}}}},30:function(e,t,n){t=e.exports=n(8)(),t.push([e.id,"#right-arr path{-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}line.ptr{stroke:#00bfff;stroke-width:10px;stroke-opacity:1}",""])},46:function(e,t,n){var r=n(1),s=n(2);e.exports=r.createClass({displayName:"module.exports",getInitialState:function(){return{text:""}},render:function(){return r.createElement("div",{className:"list"},r.createElement("input",{onChange:this._onChange,value:this.state.text,placeholder:"数组"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"msort"),value:"归并排序",title:"归并排序"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"qsort"),value:"快速排序",title:"快速排序"}))},_onChange:function(e){this.setState({text:e.target.value})},_onClick:function(e){s.runDemo(e,this.state.text)}})},73:function(e,t,n){e.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c sort.c sort.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},74:function(e,t,n){e.exports='<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j, k;\n    char *t;\n    <span class="keyword">if</span> (n == <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n/<span class="number">2</span>;\n    MergeSort(a, n/<span class="number">2</span>, s, Compare);\n    MergeSort((char *)a + j*s, n-n/<span class="number">2</span>, s, Compare);\n    t = SafeMalloc(n*s);\n    k = <span class="number">0</span>;\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span> &amp;&amp; j &lt; n) {\n        <span class="keyword">if</span> (Compare((char *)a + i*s, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n            i++;\n        } <span class="keyword">else</span> {\n             MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n            j++;\n        }\n        k++;\n    }\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span>) {\n        MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n        k++;\n        i++;\n    }\n    <span class="keyword">while</span> (j &lt; n) {\n        MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n        k++;\n        j++;\n    }\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) {\n        MemoryCopy((char *)t + i*s, (char *)a + i*s, s);\n    }\n    free(t);\n}\n\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j;\n    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n-<span class="number">1</span>;\n    <span class="keyword">while</span> (i &lt; j) {\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            j--;\n        }\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + i*s) >= <span class="number">0</span>) {\n            i++;\n        }\n        MemorySwap((char *)a + i*s, (char *)a + j*s, s);\n    }\n    MemorySwap(a, (char *)a + j*s, s);\n    QuickSort(a, j, s, Compare);\n    QuickSort((char *)a + (j+<span class="number">1</span>)*s, n-j-<span class="number">1</span>, s, Compare);\n}'},75:function(e,t,n){e.exports='<span class="comment">#ifndef SORT_H</span>\n<span class="comment">#define SORT_H</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\n\n<span class="comment">#endif</span>'},76:function(e,t,n){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;assert.h></span>\n<span class="comment">#include "./sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint cf(<span class="keyword">const</span> void *a, <span class="keyword">const</span> void *b) {\n    <span class="keyword">return</span> *(int *)a - *(int *)b;\n}\n\nint main(int argc, char <span class="keyword">const</span> *argv[])\n{\n    int i, j, m, n, *a, *b;\n    scanf(<span class="string">"%d"</span>, &amp;m);\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) {\n        scanf(<span class="string">"%d"</span>, &amp;n);\n        a = SafeMalloc(sizeof(int)*n);\n        b = SafeMalloc(sizeof(int)*n);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            scanf(<span class="string">"%d"</span>, a+j);\n            b[j] = a[j];\n        }\n        <span class="comment">// MergeSort(a, n, sizeof(int), cf);</span>\n        QuickSort(b, n, sizeof(int), cf);\n        printf(<span class="string">"test %d:\\n"</span>, i+<span class="number">1</span>);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            printf(<span class="string">"%d "</span>, b[j]);\n        }\n        printf(<span class="string">"\\n"</span>);\n        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n; ++j) {\n            <span class="comment">// assert(a[j-1] &lt;= a[j]);</span>\n            assert(b[j-<span class="number">1</span>] &lt;= b[j]);\n        }\n        <span class="comment">// printf("  MergeSort passed\\n");</span>\n        printf(<span class="string">"  QuickSort passed\\n"</span>);\n        free(a);\n        free(b);\n    }\n    printf(<span class="string">"all %d tests passed\\n"</span>, m);\n    <span class="keyword">return</span> <span class="number">0</span>;\n}'},87:function(e,t,n){var r=n(30);"string"==typeof r&&(r=[[e.id,r,""]]);n(9)(r,{})},98:function(e,t,n){function r(e){return 0===b.mp[e]?0:b.mp[e]||e}function s(e,t){return C(r(t))}function a(e,t,n){return n===!0||-1===b.dn.indexOf(t)?T(e):-(T(0)-T(e))-30}function i(e,t){return T(0)-T(e)}function o(e){for(var t=b.bg,n=t.length-1;n>0&&(t[n][0]>e||e>t[n][1]);n--);return n}function c(e,t){return 1}function l(e,t,n){return-1!==b.fin.indexOf(t)&&n!==!0?"none":(t=r(t),P(o(t)))}function p(e,t){return-1===b.fin.indexOf(t)?"none":(t=r(t),P(o(t)))}function u(){x.selectAll("rect.item").data(b.arr).enter().append("rect").attr("class","item").attr("x",function(e,t){return C(t)}).attr("y",S).attr("width",C.rangeBand()).attr("height",0),x.selectAll("rect.item").data(b.arr).transition().duration(k).attr("x",s).attr("y",a).attr("height",i).attr("width",C.rangeBand()).style("fill",l).style("stroke",p).style("opacity",c),x.selectAll("rect.item").data(b.arr).exit().remove(),w.selectAll("text.item").data(b.arr).enter().append("text").attr("class","item").attr("x",function(e,t){return C(t)+C.rangeBand()/2}).attr("y",S+20).text(function(e){return e}),w.selectAll("text.item").data(b.arr).transition().duration(k).attr("x",function(e,t){return s(e,t)+C.rangeBand()/2}).attr("y",function(e,t){return a(e,t)<0?-10:S+20}).style("fill",function(e,t){return l(e,t,!0)}).style("opacity",c),w.selectAll("text.item").data(b.arr).exit().remove()}function f(){var e=b.pt.map(function(e){return e>=b.arr.length?C(b.arr.length-1)+1.6*C.rangeBand():C(e)+C.rangeBand()/2});x.selectAll("line.pt").data(e).enter().append("line").attr("class","pt").attr("stroke",function(e,t){return P(t)}).attr("stroke-width",U).attr("stroke-opacity",.5).attr("marker-end",function(e,t){return"url(#"+(t?"j":"i")+"-arr)"}).attr("x1",function(e){return e}).attr("x2",function(e){return e}).attr("y1",function(e){return S+90}).attr("y2",function(e){return S+50}),x.selectAll("line.pt").data(e).transition().duration(k).attr("x1",function(e){return e}).attr("x2",function(e){return e}).attr("y1",function(e){return S+90}).attr("y2",function(e){return S+50}),x.selectAll("line.pt").data(e).exit().remove()}function h(){x.selectAll("line.mid").data(b.mid).enter().append("line").attr("class","mid").attr("x1",function(e){return C(e)-2.5}).attr("x2",function(e){return C(e)-2.5}).attr("y1",-20).attr("y2",-20).style("stroke",R).style("stroke-opacity",1).style("stroke-width",5).style("stroke-dasharray","20 5"),x.selectAll("line.mid").data(b.mid).transition().duration(k).attr("x1",function(e){return C(e)-2.5}).attr("x2",function(e){return C(e)-2.5}).attr("y1",-20).attr("y2",S+20),x.selectAll("line.mid").data(b.mid).exit().transition().duration(k).attr("y2",0).remove()}function d(){x.selectAll("line.cf").data(b.cf).enter().append("line").attr("class","cf").style("stroke",R).style("stroke-opacity",1).style("stroke-width",5),x.selectAll("line.cf").data(b.cf).attr("x1",function(e){return C(r(e.i))}).attr("x2",function(e){return C(r(e.i))+C.rangeBand()}).attr("y1",function(e){return T(b.arr[e.i])}).attr("y2",function(e){return T(b.arr[e.i])}).transition().duration(k).attr("x1",function(e){return C(r(e.j))}).attr("x2",function(e){return C(r(e.j))+C.rangeBand()}).attr("y1",function(e){return T(b.arr[e.i])}).attr("y2",function(e){return T(b.arr[e.i])}),x.selectAll("line.cf").data(b.cf).exit().remove()}function m(){console.log(JSON.stringify(b)),0===b.bg.length&&(b.bg=[[0,b.arr.length-1]]),A=L/12*b.arr.length,C.rangeRoundBands([0,A],.08).domain(M.range(b.arr.length)),T.domain([0,M.max(b.arr)])}function y(e,t){b=e,k=t}function g(e,t){y(e,t),m(),u(),h(),f(),d()}function v(){var e=this,t=M.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){e.svg.attr("transform",D().translate(M.event.translate).scale(M.event.scale))});this.svg=M.select(this.refs.svg.getDOMNode()).append("svg").call(t).append("g");this.svg.append("defs").selectAll("marker").data(["i","j"]).enter().append("marker").attr("id",function(e){return e+"-arr"}).attr("viewBox","-5 -5 10 10").attr("markerWidth",z).attr("markerHeight",z).attr("orient","auto").attr("refX",-5).append("path").attr("d","M-5,-5L5,0,L-5,5").attr("opacity",.5).attr("fill",function(e,t){return P(t)});this.g=this.svg.append("g").attr("transform",D().translate(100,200).scale(.5)),_=this.g.append("g").attr("class","high"),x=this.g.append("g").attr("class","base"),w=this.g.append("g").attr("class","text"),E=this.props.others}n(87);var x,w,_,b,k,E,A,M=n(3),D=n(5),S=400,L=720,C=M.scale.ordinal().rangeRoundBands([0,A],.08),T=M.scale.linear().range([S,0]),z=3,R="deepskyblue",U=10,P=(M.interpolateRgb("white","black"),M.interpolate(0,1),M.scale.category10());e.exports={init:v,render:g}}});