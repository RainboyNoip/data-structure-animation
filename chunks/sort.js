webpackJsonpdsa([5],{1:function(n,e,t){n.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},2:function(n,e,t){n.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},34:function(n,e,t){function s(){S=v(b),a(0,b.length-1),b=S}function a(n,e){f(n,e),h();var t,s,r,i,o;if(g(8,1),n==e)return g(9,1),void f();for(g(11,1),t=n,g(12,1),s=n+Math.floor((e-n+1)/2),i=s,h(t,s),g(13,1),a(t,s-1),g(14,1),a(s,e),d(i),g(15,1),o=[],g(16,1),r=0;g(17,1),i>t&&e>=s;)h(t,s),g(18,1),c(t,s),b[t]<=b[s]?(g(19,1),o[r]=b[t],m(t,n+r),c(),g(20,1),t++):(g(22,1),o[r]=b[s],m(s,n+r),c(),g(23,1),s++),h(t,s),g(25,1),r++;for(;g(27,1),i>t;)h(t,s),g(28,1),o[r]=b[t],m(t,n+r),g(29,1),r++,g(30,1),t++;for(h(t,s);g(32,1),e>=s;)h(t,s),g(33,1),o[r]=b[s],m(s,n+r),g(34,1),r++,g(35,1),s++;for(h(),t=n,r=0;g(37,1),e>=t;++t,++r)g(38,1),b[t]=o[r],m();g(40,1),f(),d()}function r(){S=v(b),o(0,b.length-1),p(),b=S}function o(n,e){f(n,e),h();var t,s,a;if(g(45,1),n>=e)return g(46,1),f(),void(n===e&&p(n));for(g(48,1),t=n,d(n+1),g(49,1),s=e,h(t,s);g(50,1),s>t;){for(;g(51,1),s>t&&(c(n,s),b[n]<=b[s]);)g(52,1),s--,h(t,s),c();for(;g(54,1),s>t&&(c(n,t),b[n]>=b[t]);)g(55,1),t++,h(t,s),c();g(57,1),a=b[t],b[t]=b[s],b[s]=a,l(t,s),c()}g(59,1),a=b[n],b[n]=b[s],b[s]=a,l(n,s),d(),p(s),g(60,1),o(n,s-1),g(61,1),o(s+1,e),f()}function c(n,e){void 0===n?x.cf=[]:x.cf=[{i:u(n),j:u(e)}]}function p(n){void 0===n?x.fin=[]:x.fin.push(u(n))}function l(n,e){bi=u(n),bj=u(e),E[n]=bj,x.mp[bi]=e,E[e]=bi,x.mp[bj]=n}function u(n){return 0===E[n]?0:E[n]||n}function d(n){void 0===n?x.mid=[]:x.mid=[n]}function h(){0===arguments.length?x.pt=[]:x.pt=Array.prototype.slice.call(arguments)}function f(n,e){void 0===n?x.bg.pop():x.bg.push([n,e])}function m(n,e){void 0===n?(n=x.dn[0],E[x.mp[n]]=n,x.dn.shift()):(n=u(n),x.dn.push(n),x.mp[n]=e)}function g(n,e,t){1===e&&(lastStatus=x.clone()),w.push({status:lastStatus,line:n,animation:t,id:k}),k++}function y(){0===w.length?0:w[w.length-1].line;g(165,1)}var v=t(6),w=[],k=0,x={},_=0,b=[],S=[],E={};x.clone=function(){return{arr:S,cf:v(this.cf),fin:v(this.fin),mid:v(this.mid),bg:v(this.bg),pt:v(this.pt),dn:v(this.dn),mp:v(this.mp)}},x.init=function(n){E=[],this.cf=[],this.fin=[],this.mid=[],this.bg=[],this.pt=[],this.dn=[],this.mp={}},lastStatus={},n.exports={getInitialDescriptions:function(){this.initialize(!0);var n=11,e=[];for(i=0;i<n;++i)e.push(Math.ceil(100*Math.random()));return this.run("qsort",e.join(" "))},initialize:function(n){return w=[],k=0,_=0,x.init(n),lastStatus=x.clone(),this},msort:s,qsort:r,run:function(n,e){var t=e.split(" ").map(function(n){return parseInt(n)}).filter(function(n){return n>0});return 0!==t.length&&(b=t),this.initialize()[n](),y(),{frames:w,others:{}}}}},43:function(n,e,t){e=n.exports=t(8)(),e.push([n.id,"#right-arr path{-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}line.ptr{stroke:#00bfff;stroke-width:10px;stroke-opacity:1}",""])},61:function(n,e,t){var s=t(3),a=t(5),r=t(128);n.exports=s.createClass({displayName:"module.exports",getInitialState:function(){return{text:""}},componentDidMount:function(){r.init.bind(this)();for(var n=11,e=[],t=0;n>t;++t)e.push(Math.ceil(100*Math.random()));a.runDemo("qsort",e.join(" "),!1)},componentDidUpdate:function(n){this.props!==n&&void 0!==this.props.frame&&r.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){return s.createElement("div",{className:"wrapper-code"},s.createElement("div",{className:"list"},s.createElement("input",{onChange:this._onChange,value:this.state.text,placeholder:"数组"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"msort"),value:"归并排序",title:"归并排序"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"qsort"),value:"快速排序",title:"快速排序"})),s.createElement("div",{ref:"svg",className:"scene"}))},_onChange:function(n){this.setState({text:n.target.value})},_onClick:function(n){a.runDemo(n,this.state.text)}})},98:function(n,e,t){n.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c sort.c sort.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},99:function(n,e,t){n.exports='<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j, k;\n    char *t;\n    <span class="keyword">if</span> (n == <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n/<span class="number">2</span>;\n    MergeSort(a, n/<span class="number">2</span>, s, Compare);\n    MergeSort((char *)a + j*s, n-n/<span class="number">2</span>, s, Compare);\n    t = SafeMalloc(n*s);\n    k = <span class="number">0</span>;\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span> &amp;&amp; j &lt; n) {\n        <span class="keyword">if</span> (Compare((char *)a + i*s, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n            i++;\n        } <span class="keyword">else</span> {\n             MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n            j++;\n        }\n        k++;\n    }\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span>) {\n        MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n        k++;\n        i++;\n    }\n    <span class="keyword">while</span> (j &lt; n) {\n        MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n        k++;\n        j++;\n    }\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) {\n        MemoryCopy((char *)t + i*s, (char *)a + i*s, s);\n    }\n    free(t);\n}\n\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j;\n    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n-<span class="number">1</span>;\n    <span class="keyword">while</span> (i &lt; j) {\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            j--;\n        }\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + i*s) >= <span class="number">0</span>) {\n            i++;\n        }\n        MemorySwap((char *)a + i*s, (char *)a + j*s, s);\n    }\n    MemorySwap(a, (char *)a + j*s, s);\n    QuickSort(a, j, s, Compare);\n    QuickSort((char *)a + (j+<span class="number">1</span>)*s, n-j-<span class="number">1</span>, s, Compare);\n}'},100:function(n,e,t){n.exports='<span class="comment">#ifndef SORT_H</span>\n<span class="comment">#define SORT_H</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\n\n<span class="comment">#endif</span>'},101:function(n,e,t){n.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;assert.h></span>\n<span class="comment">#include "./sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint cf(<span class="keyword">const</span> void *a, <span class="keyword">const</span> void *b) {\n    <span class="keyword">return</span> *(int *)a - *(int *)b;\n}\n\nint main(int argc, char <span class="keyword">const</span> *argv[])\n{\n    int i, j, m, n, *a, *b;\n    scanf(<span class="string">"%d"</span>, &amp;m);\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) {\n        scanf(<span class="string">"%d"</span>, &amp;n);\n        a = SafeMalloc(sizeof(int)*n);\n        b = SafeMalloc(sizeof(int)*n);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            scanf(<span class="string">"%d"</span>, a+j);\n            b[j] = a[j];\n        }\n        <span class="comment">// MergeSort(a, n, sizeof(int), cf);</span>\n        QuickSort(b, n, sizeof(int), cf);\n        printf(<span class="string">"test %d:\\n"</span>, i+<span class="number">1</span>);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            printf(<span class="string">"%d "</span>, b[j]);\n        }\n        printf(<span class="string">"\\n"</span>);\n        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n; ++j) {\n            <span class="comment">// assert(a[j-1] &lt;= a[j]);</span>\n            assert(b[j-<span class="number">1</span>] &lt;= b[j]);\n        }\n        <span class="comment">// printf("  MergeSort passed\\n");</span>\n        printf(<span class="string">"  QuickSort passed\\n"</span>);\n        free(a);\n        free(b);\n    }\n    printf(<span class="string">"all %d tests passed\\n"</span>, m);\n    <span class="keyword">return</span> <span class="number">0</span>;\n}'},114:function(n,e,t){var s=t(43);"string"==typeof s&&(s=[[n.id,s,""]]);t(9)(s,{})},128:function(n,e,t){function s(n){return 0===_.mp[n]?0:_.mp[n]||n}function a(n,e){return C(s(e))}function r(n,e,t){return t===!0||-1===_.dn.indexOf(e)?D(n):-(D(0)-D(n))-30}function i(n,e){return D(0)-D(n)}function o(n){for(var e=_.bg,t=e.length-1;t>0&&(e[t][0]>n||n>e[t][1]);t--);return t}function c(n,e){return 1}function p(n,e,t){return-1!==_.fin.indexOf(e)&&t!==!0?"none":(e=s(e),U(o(e)))}function l(n,e){return-1===_.fin.indexOf(e)?"none":(e=s(e),U(o(e)))}function u(){w.selectAll("rect.item").data(_.arr).enter().append("rect").attr("class","item").attr("x",function(n,e){return C(e)}).attr("y",L).attr("width",C.rangeBand()).attr("height",0),w.selectAll("rect.item").data(_.arr).transition().duration(b).attr("x",a).attr("y",r).attr("height",i).attr("width",C.rangeBand()).style("fill",p).style("stroke",l).style("opacity",c),w.selectAll("rect.item").data(_.arr).exit().remove(),k.selectAll("text.item").data(_.arr).enter().append("text").attr("class","item").attr("x",function(n,e){return C(e)+C.rangeBand()/2}).attr("y",L+20).text(function(n){return n}),k.selectAll("text.item").data(_.arr).transition().duration(b).attr("x",function(n,e){return a(n,e)+C.rangeBand()/2}).attr("y",function(n,e){return r(n,e)<0?-10:L+20}).style("fill",function(n,e){return p(n,e,!0)}).style("opacity",c).text(function(n){return n}),k.selectAll("text.item").data(_.arr).exit().remove()}function d(){var n=_.pt.map(function(n){return n>=_.arr.length?C(_.arr.length-1)+1.6*C.rangeBand():C(n)+C.rangeBand()/2});w.selectAll("line.pt").data(n).enter().append("line").attr("class","pt").attr("stroke",function(n,e){return U(e)}).attr("stroke-width",I).attr("stroke-opacity",.5).attr("marker-end",function(n,e){return"url(#"+(e?"j":"i")+"-arr)"}).attr("x1",function(n){return n}).attr("x2",function(n){return n}).attr("y1",function(n){return L+90}).attr("y2",function(n){return L+50}),w.selectAll("line.pt").data(n).transition().duration(b).attr("x1",function(n){return n}).attr("x2",function(n){return n}).attr("y1",function(n){return L+90}).attr("y2",function(n){return L+50}),w.selectAll("line.pt").data(n).exit().remove()}function h(){w.selectAll("line.mid").data(_.mid).enter().append("line").attr("class","mid").attr("x1",function(n){return C(n)-2.5}).attr("x2",function(n){return C(n)-2.5}).attr("y1",-20).attr("y2",-20).style("stroke",T).style("stroke-opacity",1).style("stroke-width",5).style("stroke-dasharray","20 5"),w.selectAll("line.mid").data(_.mid).transition().duration(b).attr("x1",function(n){return C(n)-2.5}).attr("x2",function(n){return C(n)-2.5}).attr("y1",-20).attr("y2",L+20),w.selectAll("line.mid").data(_.mid).exit().transition().duration(b).attr("y2",0).remove()}function f(){w.selectAll("line.cf").data(_.cf).enter().append("line").attr("class","cf").style("stroke",T).style("stroke-opacity",1).style("stroke-width",5),w.selectAll("line.cf").data(_.cf).attr("x1",function(n){return C(s(n.i))}).attr("x2",function(n){return C(s(n.i))+C.rangeBand()}).attr("y1",function(n){return D(_.arr[n.i])}).attr("y2",function(n){return D(_.arr[n.i])}).transition().duration(b).attr("x1",function(n){return C(s(n.j))}).attr("x2",function(n){return C(s(n.j))+C.rangeBand()}).attr("y1",function(n){return D(_.arr[n.i])}).attr("y2",function(n){return D(_.arr[n.i])}),w.selectAll("line.cf").data(_.cf).exit().remove()}function m(){console.log(JSON.stringify(_)),0===_.bg.length&&(_.bg=[[0,_.arr.length-1]]),E=M/12*_.arr.length,C.rangeRoundBands([0,E],.08).domain(z.range(_.arr.length)),D.domain([0,z.max(_.arr)])}function g(n,e){_=n,b=e}function y(n,e){g(n,e),m(),u(),h(),d(),f()}function v(){var n=this,e=z.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){n.svg.attr("transform",A().translate(z.event.translate).scale(z.event.scale))});this.svg=z.select(this.refs.svg.getDOMNode()).append("svg").call(e).append("g");this.svg.append("defs").selectAll("marker").data(["i","j"]).enter().append("marker").attr("id",function(n){return n+"-arr"}).attr("viewBox","-5 -5 10 10").attr("markerWidth",P).attr("markerHeight",P).attr("orient","auto").attr("refX",-5).append("path").attr("d","M-5,-5L5,0L-5,5").attr("opacity",.5).attr("fill",function(n,e){return U(e)});this.g=this.svg.append("g").attr("transform",A().translate(100,200).scale(.5)),x=this.g.append("g").attr("class","high"),w=this.g.append("g").attr("class","base"),k=this.g.append("g").attr("class","text"),S=this.props.others}t(114);var w,k,x,_,b,S,E,z=t(4),A=t(7),L=400,M=720,C=z.scale.ordinal().rangeRoundBands([0,E],.08),D=z.scale.linear().range([L,0]),P=3,T="deepskyblue",I=10,U=(z.interpolateRgb("white","black"),z.interpolate(0,1),z.scale.category10());n.exports={init:v,render:y}}});