webpackJsonpdsa([6],{2:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},3:function(e,n,t){e.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},35:function(e,n,t){function a(){E=v(b),s(0,b.length-1),b=E}function s(e,n){m(e,n),h();var t,a,r,i,o;if(g(8,1),e==n)return g(9,1),void m();for(g(11,1),t=e,g(12,1),a=e+Math.floor((n-e+1)/2),i=a,h(t,a),g(13,1),s(t,a-1),g(14,1),s(a,n),u(i),g(15,1),o=[],g(16,1),r=0;g(17,1),i>t&&n>=a;)h(t,a),g(18,1),c(t,a),b[t]<=b[a]?(g(19,1),o[r]=b[t],f(t,e+r),c(),g(20,1),t++):(g(22,1),o[r]=b[a],f(a,e+r),c(),g(23,1),a++),h(t,a),g(25,1),r++;for(;g(27,1),i>t;)h(t,a),g(28,1),o[r]=b[t],f(t,e+r),g(29,1),r++,g(30,1),t++;for(h(t,a);g(32,1),n>=a;)h(t,a),g(33,1),o[r]=b[a],f(a,e+r),g(34,1),r++,g(35,1),a++;for(h(),t=e,r=0;g(37,1),n>=t;++t,++r)g(38,1),b[t]=o[r],f();g(40,1),m(),u()}function r(){E=v(b),o(0,b.length-1),l(),b=E}function o(e,n){m(e,n),h();var t,a,s;if(g(45,1),e>=n)return g(46,1),m(),void(e===n&&l(e));for(g(48,1),t=e,u(e+1),g(49,1),a=n,h(t,a);g(50,1),a>t;){for(;g(51,1),a>t&&(c(e,a),b[e]<=b[a]);)g(52,1),a--,h(t,a),c();for(;g(54,1),a>t&&(c(e,t),b[e]>=b[t]);)g(55,1),t++,h(t,a),c();g(57,1),s=b[t],b[t]=b[a],b[a]=s,p(t,a),c()}g(59,1),s=b[e],b[e]=b[a],b[a]=s,p(e,a),u(),l(a),g(60,1),o(e,a-1),g(61,1),o(a+1,n),m()}function c(e,n){void 0===e?x.cf=[]:x.cf=[{i:d(e),j:d(n)}]}function l(e){void 0===e?x.fin=[]:x.fin.push(d(e))}function p(e,n){bi=d(e),bj=d(n),S[e]=bj,x.mp[bi]=n,S[n]=bi,x.mp[bj]=e}function d(e){return 0===S[e]?0:S[e]||e}function u(e){void 0===e?x.mid=[]:x.mid=[e]}function h(){0===arguments.length?x.pt=[]:x.pt=Array.prototype.slice.call(arguments)}function m(e,n){void 0===e?x.bg.pop():x.bg.push([e,n])}function f(e,n){void 0===e?(e=x.dn[0],S[x.mp[e]]=e,x.dn.shift()):(e=d(e),x.dn.push(e),x.mp[e]=n)}function g(e,n,t){1===n&&(lastStatus=x.clone()),k.push({status:lastStatus,line:e,animation:t,id:w}),w++}function y(){0===k.length?0:k[k.length-1].line;g(165,1)}var v=t(8),k=[],w=0,x={},_=0,b=[],E=[],S={};x.clone=function(){return{arr:E,cf:v(this.cf),fin:v(this.fin),mid:v(this.mid),bg:v(this.bg),pt:v(this.pt),dn:v(this.dn),mp:v(this.mp)}},x.init=function(e){S=[],this.cf=[],this.fin=[],this.mid=[],this.bg=[],this.pt=[],this.dn=[],this.mp={}},lastStatus={},e.exports={getInitialDescriptions:function(){this.initialize(!0);var e=11,n=[];for(i=0;i<e;++i)n.push(Math.ceil(100*Math.random()));return this.run("qsort",n.join(" "))},initialize:function(e){return k=[],w=0,_=0,x.init(e),lastStatus=x.clone(),this},msort:a,qsort:r,run:function(e,n){var t=n.split(" ").map(function(e){return parseInt(e)}).filter(function(e){return e>0});return 0!==t.length&&(b=t),this.initialize()[e](),y(),{frames:k,others:{}}}}},46:function(e,n,t){n=e.exports=t(5)(),n.push([e.id,"#right-arr path{-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}line.ptr{stroke:#00bfff;stroke-width:10px;stroke-opacity:1}",""])},75:function(e,n,t){var a=t(1);e.exports=a.createClass({displayName:"module.exports",render:function(){var e={display:this.props.show?"block":"none"};return a.createElement("svg",{className:"legend",width:"210",height:"120",style:e},a.createElement("rect",{className:"outline",stroke:"black",x:"0",y:"0",width:"200",height:"115"}),a.createElement("g",{transform:"translate(15,20)"},a.createElement("g",{transform:"translate(0,0)"},a.createElement("line",{className:"pt",stroke:"#1f77b4",strokeWidth:"5",strokeOpacity:"0.5",markerEnd:"url(#i-arr)",x1:"0",x2:"20",y1:"0",y2:"0"})),a.createElement("g",{transform:"translate(0,25)"},a.createElement("line",{className:"pt",stroke:"#ff7f0e",strokeWidth:"5",strokeOpacity:"0.5",markerEnd:"url(#j-arr)",x1:"0",x2:"20",y1:"0",y2:"0"})),a.createElement("g",{transform:"translate(0,50)"},a.createElement("line",{className:"mid",strokeOpacity:"1",x1:"0",x2:"32",y1:"0",y2:"0",stroke:"rgb(0, 191, 255)",strokeWidth:"5",strokeDasharray:"5px, 1.5px"})),a.createElement("g",{transform:"translate(0,68)"},a.createElement("rect",{width:"15",height:"15",fill:"none",stroke:"#1f77b4"})),a.createElement("g",{transform:"translate(0,5)"},a.createElement("text",{x:"40",y:"0"},"i 指针"),a.createElement("text",{x:"40",y:"25"},"j 指针"),a.createElement("text",{x:"40",y:"50"},"分区线"),a.createElement("text",{x:"40",y:"75"},"已完成排序的元素"))))}})},76:function(e,n,t){var a=t(1),s=t(7),r=t(154),i=t(75);e.exports=a.createClass({displayName:"module.exports",getInitialState:function(){return{text:"",demo:"qsort",help:!0}},componentDidMount:function(){r.init.bind(this)();for(var e=11,n=[],t=0;e>t;++t)n.push(Math.ceil(100*Math.random()));s.runDemo("qsort",n.join(" "),!1)},componentDidUpdate:function(e){this.props!==e&&void 0!==this.props.frame&&r.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){var e=[{button:{demo:"msort",onClick:this._onClick.bind(this,"msort"),value:"归并排序"},items:[{onChange:this._onChange,value:this.state.text,placeholder:"数组"}]},{button:{demo:"qsort",onClick:this._onClick.bind(this,"qsort"),value:"快速排序"},items:[{onChange:this._onChange,value:this.state.text,placeholder:"数组"}]},{button:{help:this.state.help,onClick:this._onHelp,value:"帮助"}}],n=this;return a.createElement("div",{className:"wrapper-code"},a.createElement("div",{className:"list"},e.map(function(e,t){var s="input-group"+(e.button.help||e.button.demo===n.state.demo?" input-current":""),r=e.items?e.items:[];return a.createElement("div",{key:t,className:s},a.createElement("input",{className:"input-button",readOnly:!0,onClick:e.button.onClick,value:e.button.value,title:e.button.value}),a.createElement("div",null,r.map(function(e,n){return a.createElement("input",{key:n,className:"input-item",onChange:e.onChange,value:e.value,title:e.value,placeholder:e.placeholder})})))})),a.createElement("div",{ref:"svg",className:"scene"}),a.createElement(i,{show:this.state.help}))},_onChange:function(e){this.setState({text:e.target.value})},_onClick:function(e){this.setState({demo:e}),s.runDemo(e,this.state.text)},_onHelp:function(){this.setState({help:!this.state.help})}})},117:function(e,n,t){e.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c sort.c sort.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},118:function(e,n,t){e.exports='<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j, k;\n    char *t;\n    <span class="keyword">if</span> (n == <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n/<span class="number">2</span>;\n    MergeSort(a, n/<span class="number">2</span>, s, Compare);\n    MergeSort((char *)a + j*s, n-n/<span class="number">2</span>, s, Compare);\n    t = SafeMalloc(n*s);\n    k = <span class="number">0</span>;\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span> &amp;&amp; j &lt; n) {\n        <span class="keyword">if</span> (Compare((char *)a + i*s, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n            i++;\n        } <span class="keyword">else</span> {\n             MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n            j++;\n        }\n        k++;\n    }\n    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span>) {\n        MemoryCopy((char *)t + k*s, (char *)a + i*s, s);\n        k++;\n        i++;\n    }\n    <span class="keyword">while</span> (j &lt; n) {\n        MemoryCopy((char *)t + k*s, (char *)a + j*s, s);\n        k++;\n        j++;\n    }\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) {\n        MemoryCopy((char *)t + i*s, (char *)a + i*s, s);\n    }\n    free(t);\n}\n\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *)) {\n    int i, j;\n    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) {\n        <span class="keyword">return</span>;\n    }\n    i = <span class="number">0</span>;\n    j = n-<span class="number">1</span>;\n    <span class="keyword">while</span> (i &lt; j) {\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + j*s) &lt;= <span class="number">0</span>) {\n            j--;\n        }\n        <span class="keyword">while</span> (i &lt; j &amp;&amp; Compare(a, (char *)a + i*s) >= <span class="number">0</span>) {\n            i++;\n        }\n        MemorySwap((char *)a + i*s, (char *)a + j*s, s);\n    }\n    MemorySwap(a, (char *)a + j*s, s);\n    QuickSort(a, j, s, Compare);\n    QuickSort((char *)a + (j+<span class="number">1</span>)*s, n-j-<span class="number">1</span>, s, Compare);\n}'},119:function(e,n,t){e.exports='<span class="comment">#ifndef SORT_H</span>\n<span class="comment">#define SORT_H</span>\n\nvoid MergeSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\nvoid QuickSort(void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\n\n<span class="comment">#endif</span>'},120:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;assert.h></span>\n<span class="comment">#include "./sort.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint cf(<span class="keyword">const</span> void *a, <span class="keyword">const</span> void *b) {\n    <span class="keyword">return</span> *(int *)a - *(int *)b;\n}\n\nint main(int argc, char <span class="keyword">const</span> *argv[])\n{\n    int i, j, m, n, *a, *b;\n    scanf(<span class="string">"%d"</span>, &amp;m);\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) {\n        scanf(<span class="string">"%d"</span>, &amp;n);\n        a = SafeMalloc(sizeof(int)*n);\n        b = SafeMalloc(sizeof(int)*n);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            scanf(<span class="string">"%d"</span>, a+j);\n            b[j] = a[j];\n        }\n        <span class="comment">// MergeSort(a, n, sizeof(int), cf);</span>\n        QuickSort(b, n, sizeof(int), cf);\n        printf(<span class="string">"test %d:\\n"</span>, i+<span class="number">1</span>);\n        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; ++j) {\n            printf(<span class="string">"%d "</span>, b[j]);\n        }\n        printf(<span class="string">"\\n"</span>);\n        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; n; ++j) {\n            <span class="comment">// assert(a[j-1] &lt;= a[j]);</span>\n            assert(b[j-<span class="number">1</span>] &lt;= b[j]);\n        }\n        <span class="comment">// printf("  MergeSort passed\\n");</span>\n        printf(<span class="string">"  QuickSort passed\\n"</span>);\n        free(a);\n        free(b);\n    }\n    printf(<span class="string">"all %d tests passed\\n"</span>, m);\n    <span class="keyword">return</span> <span class="number">0</span>;\n}'},138:function(e,n,t){var a=t(46);"string"==typeof a&&(a=[[e.id,a,""]]);t(6)(a,{})},154:function(e,n,t){function a(e){return 0===_.mp[e]?0:_.mp[e]||e}function s(e,n){return A(a(n))}function r(e,n,t){return t===!0||-1===_.dn.indexOf(n)?N(e):-(N(0)-N(e))-30}function i(e,n){return N(0)-N(e)}function o(e){for(var n=_.bg,t=n.length-1;t>0&&(n[t][0]>e||e>n[t][1]);t--);return t}function c(e,n){return 1}function l(e,n,t){return-1!==_.fin.indexOf(n)&&t!==!0?"none":(n=a(n),T(o(n)))}function p(e,n){return-1===_.fin.indexOf(n)?"none":(n=a(n),T(o(n)))}function d(){k.selectAll("rect.item").data(_.arr).enter().append("rect").attr("class","item").attr("x",function(e,n){return A(n)}).attr("y",C).attr("width",A.rangeBand()).attr("height",0),k.selectAll("rect.item").data(_.arr).transition().duration(b).attr("x",s).attr("y",r).attr("height",i).attr("width",A.rangeBand()).style("fill",l).style("stroke",p).style("opacity",c),k.selectAll("rect.item").data(_.arr).exit().remove(),w.selectAll("text.item").data(_.arr).enter().append("text").attr("class","item").attr("x",function(e,n){return A(n)+A.rangeBand()/2}).attr("y",C+20).text(function(e){return e}),w.selectAll("text.item").data(_.arr).transition().duration(b).attr("x",function(e,n){return s(e,n)+A.rangeBand()/2}).attr("y",function(e,n){return r(e,n)<0?-10:C+20}).style("fill",function(e,n){return l(e,n,!0)}).style("opacity",c).text(function(e){return e}),w.selectAll("text.item").data(_.arr).exit().remove()}function u(){var e=_.pt.map(function(e){return e>=_.arr.length?A(_.arr.length-1)+1.6*A.rangeBand():A(e)+A.rangeBand()/2});k.selectAll("line.pt").data(e).enter().append("line").attr("class","pt").attr("stroke",function(e,n){return T(n)}).attr("stroke-width",I).attr("stroke-opacity",.5).attr("marker-end",function(e,n){return"url(#"+(n?"j":"i")+"-arr)"}).attr("x1",function(e){return e}).attr("x2",function(e){return e}).attr("y1",function(e){return C+90}).attr("y2",function(e){return C+50}),k.selectAll("line.pt").data(e).transition().duration(b).attr("x1",function(e){return e}).attr("x2",function(e){return e}).attr("y1",function(e){return C+90}).attr("y2",function(e){return C+50}),k.selectAll("line.pt").data(e).exit().remove()}function h(){k.selectAll("line.mid").data(_.mid).enter().append("line").attr("class","mid").attr("x1",function(e){return A(e)-2.5}).attr("x2",function(e){return A(e)-2.5}).attr("y1",-20).attr("y2",-20).style("stroke",P).style("stroke-opacity",1).style("stroke-width",5).style("stroke-dasharray","20 5"),k.selectAll("line.mid").data(_.mid).transition().duration(b).attr("x1",function(e){return A(e)-2.5}).attr("x2",function(e){return A(e)-2.5}).attr("y1",-20).attr("y2",C+20),k.selectAll("line.mid").data(_.mid).exit().transition().duration(b).attr("y2",0).remove()}function m(){k.selectAll("line.cf").data(_.cf).enter().append("line").attr("class","cf").style("stroke",P).style("stroke-opacity",1).style("stroke-width",5),k.selectAll("line.cf").data(_.cf).attr("x1",function(e){return A(a(e.i))}).attr("x2",function(e){return A(a(e.i))+A.rangeBand()}).attr("y1",function(e){return N(_.arr[e.i])}).attr("y2",function(e){return N(_.arr[e.i])}).transition().duration(b).attr("x1",function(e){return A(a(e.j))}).attr("x2",function(e){return A(a(e.j))+A.rangeBand()}).attr("y1",function(e){return N(_.arr[e.i])}).attr("y2",function(e){return N(_.arr[e.i])}),k.selectAll("line.cf").data(_.cf).exit().remove()}function f(){console.log(JSON.stringify(_)),0===_.bg.length&&(_.bg=[[0,_.arr.length-1]]),S=M/12*_.arr.length,A.rangeRoundBands([0,S],.08).domain(z.range(_.arr.length)),N.domain([0,z.max(_.arr)])}function g(e,n){_=e,b=n}function y(e,n){g(e,n),f(),d(),h(),u(),m()}function v(){var e=this,n=z.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){e.svg.attr("transform",L().translate(z.event.translate).scale(z.event.scale))});this.svg=z.select(this.refs.svg.getDOMNode()).append("svg").call(n).append("g");this.svg.append("defs").selectAll("marker").data(["i","j"]).enter().append("marker").attr("id",function(e){return e+"-arr"}).attr("viewBox","-5 -5 10 10").attr("markerWidth",D).attr("markerHeight",D).attr("orient","auto").attr("refX",-5).append("path").attr("d","M-5,-5L5,0L-5,5").attr("opacity",.5).attr("fill",function(e,n){return T(n)});this.g=this.svg.append("g").attr("transform",L().translate(100,200).scale(.5)),x=this.g.append("g").attr("class","high"),k=this.g.append("g").attr("class","base"),w=this.g.append("g").attr("class","text"),E=this.props.others}t(138);var k,w,x,_,b,E,S,z=t(4),L=t(9),C=400,M=720,A=z.scale.ordinal().rangeRoundBands([0,S],.08),N=z.scale.linear().range([C,0]),D=3,P="deepskyblue",I=10,T=(z.interpolateRgb("white","black"),z.interpolate(0,1),z.scale.category10());e.exports={init:v,render:y}}});