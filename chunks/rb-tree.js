webpackJsonpdsa([6],{6:function(t,n,e){t.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},7:function(t,n,e){t.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},23:function(n,e,r){function s(){return{id:I++,nil:!0,key:"nil",color:P}}function a(t){b(),k(t),x(t,"left");var n;M(23,1),n=t.right,b(n,t),M(24,1),t.right=n.left,A(t,"right"),b(t,n.left),M(25,1),n.left.nil!==!0&&(M(26,1),n.left.p=t,A(n.left,"p"),b(n.left,t)),M(28,1),n.p=t.p,A(n,"p"),b(n,t.p),M(29,1),t.p.nil?(M(30,1),j.root=n,b(n)):(M(31,1),t===t.p.left?(M(32,1),t.p.left=n,A(t.p,"left")):(M(34,1),t.p.right=n,A(t.p,"right"))),M(36,1),n.left=t,A(n,"left"),b(n,t),M(37,1),t.p=n,A(t,"p"),b(t,n),M(37,1),b(),_(),z(),x()}function i(t){b(),k(t),x(t,"right");var n;M(42,1),n=t.left,b(n,t),M(43,1),t.left=n.right,A(t,"left"),b(t,n.right),M(44,1),n.right.nil!==!0&&(M(45,1),n.right.p=t,A(n.right,"p"),b(n.right,t)),M(47,1),n.p=t.p,A(n,"p"),b(n,t.p),M(48,1),t.p.nil?(M(49,1),j.root=n,b(n)):(M(50,1),t===t.p.right?(M(51,1),t.p.right=n,A(t.p,"right")):(M(53,1),t.p.left=n,A(t.p,"left"))),M(55,1),n.right=t,A(n,"right"),b(n,t),M(56,1),t.p=n,A(t,"p"),b(t,n),M(56,1),b(),_(),z(),x()}function o(t){for(var n;M(61,1),_(t),b(t,t.p),t.p.color===N;)M(62,1),_(t.p.p),t.p===t.p.p.left?(M(63,1),n=t.p.p.right,M(64,1),b(n),n.color===N?(M(65,1),t.p.color=P,w(t.p),b(n,t.p),M(66,1),n.color=P,w(n),M(67,1),t.p.p.color=N,w(t.p.p),b(n,t.p,t.p.p),M(68,1),t=t.p.p,b(t)):(M(70,1),b(t.p,t),t===t.p.right&&(M(71,1),t=t.p,b(t),M(72,1),a(t)),M(74,1),t.p.color=P,w(t.p),b(t.p),M(75,1),t.p.p.color=N,w(t.p.p),b(t.p.p),M(76,1),i(t.p.p))):(M(79,1),n=t.p.p.left,M(80,1),b(n),n.color===N?(M(81,1),t.p.color=P,w(t.p),b(n,t.p),M(82,1),n.color=P,w(n),M(83,1),t.p.p.color=N,w(t.p.p),b(n,t.p,t.p.p),M(84,1),t=t.p.p,b(t)):(M(86,1),b(t.p,t),t===t.p.left&&(M(87,1),t=t.p,b(t),M(88,1),i(t),b(),_(),z()),M(90,1),t.p.color=P,w(t.p),b(t.p),M(91,1),t.p.p.color=N,w(t.p.p),b(t.p.p),M(92,1),a(t.p.p),b(),_(),z()));M(96,1),j.root.color=P,z(),b(),_()}function c(t){var n,e;for(M(102),e=j.nil,M(103),n=j.root;M(104,1),_(n),n.nil!==!0;)M(105,1),e=n,M(106),t.key<n.key?(M(107,1),n=n.left,C(t,n)):(M(109,1),n=n.right,C(t,n));_(e),M(112,1),t.p=e,A(t,"p"),M(113,1),e===j.nil?(M(114,1),j.root=t):(M(115,1),t.key<e.key?(M(116,1),e.left=t,A(e,"left")):(M(118,1),e.right=t,A(e,"right"))),_(t),M(120,1),t.left=s(),z(),A(t,"left"),M(121,1),t.right=s(),z(),A(t,"right"),M(122,1),t.color=N,w(t),A(),M(123,1),o(t)}function l(t){var n={};M(128),n.id=I++,M(129),n.key=t,C(n,j.root),M(130,1),c(n)}function p(t,n){k(n),M(134,1),t.p.nil?(M(135,1),j.root=n):(M(136,1),t===t.p.left?(M(137,1),t.p.left=n,A(t.p,"left"),b(t.p,n)):(M(139,1),t.p.right=n,A(t.p,"right"),b(t.p,n))),M(141,1),n.p=t.p,A(n,"p"),b(n,t.p),S(n,t),M(141,1),_(),b()}function u(n,e){b(n);for(var r,s;M(147,1),b(n),n!==j.root&&n.color===P;)M(148,1),n===n.p.left?(M(149,1),s=n.p.right,M(150,1),b(n,s),s.color===N&&(M(151,1),s.color=P,w(s),b(n,s),M(152,1),n.p.color=N,w(n.p),E(n,s,n.p),M(153,1),a(n.p),b(n),C(e,n),M(154,1),s=n.p.right),M(156,1),b(n,s.left,s.right),s.left.color===P&&s.right.color===P?(M(157,1),s.color=N,w(s),E(s),M(158,1),n=n.p,b(n),C(e,n)):(M(160,1),b(n,s.right),s.right.color===P&&(M(161,1),s.left.color=P,w(s.left),E(s.left),M(162,1),s.color=N,w(s),E(s),M(163,1),i(s),b(n),C(e,n),M(164,1),s=n.p.right),M(166,1),r=n.p.color,C(e,n.p),E(n.p),M(167,1),n.p.color=P,w(n.p),e.color=r,C(e,n.p),M(168,1),s.color=r,w(s),E(s),e.color=P,C(e,s),M(169,1),s.right.color=P,w(s.right),E(s.right),e.color=N,C(e,s.right),M(170,1),a(n.p),b(s.right),C(e,s.right),M(171,1),n=j.root,b(n))):(M(174,1),s=n.p.left,M(175,1),b(n,s),s.color===N&&(M(176,1),s.color=P,w(s),b(n,s),M(177,1),n.p.color=N,w(n.p),E(n,s,n.p),M(178,1),i(n.p),b(n),C(e,n),M(179,1),s=n.p.left),M(181,1),b(n,s.left,s.right),s.right.color===P&&s.left.color===P?(M(182,1),s.color=N,w(s),E(s),M(183,1),n=n.p,b(n),C(e,n)):(M(185,1),b(n,s.left),s.left.color===P&&(M(186,1),s.right.color=P,w(s.right),E(s.right),M(187,1),s.color=N,w(s),E(s),M(188,1),a(t,s),b(n),C(e,n),M(189,1),s=n.p.left),M(191,1),r=n.p.color,E(n.p),M(192,1),n.p.color=P,w(n.p),e.color=r,C(e,n.p),M(193,1),s.color=r,w(s),E(s),e.color=P,C(e,s),M(194,1),s.left.color=P,w(s.left),E(s.left),E(s.left),e.color=N,C(e,s.left),M(195,1),i(n.p),b(s.right),C(e,s.right),M(196,1),n=j.root,b(n)));M(200,1),n.color=P,w(n),C()}function d(t,n){var e={id:n,key:"min"};for(C(e,t),b(t);M(204,1),E(t.left),t.left.nil!==!0;)M(205,1),t=t.left,b(t),C(e,t);return M(207,1),b(t),t}function f(t){_(t),b(t);var n,e,r,s={id:I++,extra:!0,key:""};M(214,1),e=t,C(s,t),M(215,1),r=e.color,s.color=e.color,C(s,t),M(216,1),b(t,t.left),t.left.nil?(M(217,1),n=t.right,b(t),M(218,1),p(t,t.right),z()):(M(219,1),b(t,t.right),t.right.nil?(M(220,1),n=t.left,b(t),M(221,1),p(t,t.left),z()):(b(t),M(223,1),e=d(t.right,s.id),delete s.color,C(s,e),b(e),M(224,1),r=e.color,s.color=e.color,C(s,e),M(225,1),n=e.right,M(226,1),e.p===t?(M(227,1),n.p=e,A(n,"p"),E(n)):(M(229,1),p(e,e.right),b(e),M(230,1),e.right=t.right,A(e,"right"),b(e,t.right),S(e,t),M(231,1),e.right.p=e,A(e.right,"p")),M(233,1),p(t,e),b(e),M(234,1),e.left=t.left,A(e,"left"),b(e,t.left),M(235,1),e.left.p=e,A(e.left,"p"),b(e.left,e),M(236,1),e.color=t.color,w(e),z())),C(s,n),_(),b(),M(238,1),b(s),r===P&&(M(239,1),u(n,s)),M(240,1),C(),b(),_()}function h(t,n){var e={id:I++,key:n};for(C(e,j.root);M(244,1),_(t),t.nil!==!0&&n!==t.key;)M(245,1),n<t.key?(M(246,1),t=t.left,C(e,t)):(M(248,1),t=t.right,C(e,t));return _(),b(t),M(251,1),C(),t}function m(t){M(255,1),T=h(j.root,t),M(256,1),C({id:I,key:T.nil!==!0?t:"X"},T)}function y(t){M(259,1);var n=h(j.root,t);M(260,1),n.nil!==!0&&(M(261,1),f(n)),b(),_()}function g(t,n){n.key="递归",C(n,t),M(266,1),t.nil!==!0&&(M(267,1),g(t.left,n),n.key="回溯",C(n,t),M(268,1),E(t),M(269,1),g(t.right,n),n.key="回溯",C(n,t),M(270,1)),M(271,1)}function v(){var t={id:I++,key:"指针"};b(t),M(274,1),g(j.root,t),M(275,1),t.key="完成",C(t,j.root)}function x(t,n){if(void 0===t)O.ro=void 0;else{var e="left"===n?"right":"left",r=[t.id,t[e].id,t[e][e].id,t[e][n].id,t[n].id];O.ro={ids:r,type:n}}}function w(t){void 0===t?O.co={}:(O.co=O.co||{},O.co[t.id]=t.color)}function k(t){O.hls.push(t.id)}function _(t){O.hls.pop(),void 0!==t&&k(t)}function b(){0===arguments.length?O.hl=[]:O.hl=Array.prototype.map.call(arguments,function(t){return t.id})}function E(t){O.hl.push(t.id)}function A(t,n){if(void 0===t)O.ne={};else{var e=t.id+n;O.ne=O.ne||{},O.ne[e]=t[n].id,O.ne.curr=e}}function S(t,n){void 0===t?O.np={}:(O.np=O.np||{},O.np[t.id]=n.id)}function C(t,n){0===arguments.length?O.nn=void 0:O.nn={id:t.id,key:t.key,color:t.color,ref:n.id,extra:t.extra}}function z(){w(),A(),S(),C(),O.lastTree=R(j)}function D(){}function M(t,n,e){1===n&&(lastStatus=O.clone()),B.push({status:lastStatus,line:t,animation:e,id:U}),U++}function L(){M(B[B.length-1].line,1)}var T,R=r(4),B=[],U=0,O={},I=0,N=1,P=0,j={nil:s()};j.root=j.nil,O.clone=function(){return void 0===this.lastTree&&(this.lastTree=R(j)),{tree:this.lastTree,hl:R(this.hl)||[],hls:R(this.hls)||[],ne:R(this.ne)||{},np:R(this.np)||{},nn:R(this.nn),co:R(this.co)||{},ro:R(this.ro)||void 0}},O.init=function(t){t&&(j.root=j.nil),this.hl=[],this.hls=[],this.ne={},this.np={},this.nn=void 0,this.co={},this.ro=void 0},lastStatus={},n.exports={getInitialDescriptions:function(){return this.initialize(!0),l(10),l(1),l(2),l(3),l(4),l(5),this.run("insert","6")},initialize:function(t){return B=[],U=0,O.init(t),lastStatus=O.clone(),this},insert:l,inorder:v,"delete":y,search:m,check:D,run:function(t,n){return this.initialize()[t](isNaN(parseInt(n))?0:parseInt(n)),L(),{frames:B,others:{}}}}},48:function(t,n,e){var r=e(1),s=e(3),a=e(112);t.exports=r.createClass({displayName:"module.exports",getInitialState:function(){return{text:""}},componentDidMount:function(){a.init.bind(this)(),s.runDemo("insert",10),s.runDemo("insert",1),s.runDemo("insert",2),s.runDemo("insert",3),s.runDemo("insert",4),s.runDemo("insert",5,!1)},componentDidUpdate:function(t){this.props!==t&&void 0!==this.props.frame&&a.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){return r.createElement("div",{className:"wrapper-code"},r.createElement("div",{className:"list"},r.createElement("input",{onChange:this._onChange,value:this.state.text,placeholder:"整数"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"insert"),value:"插入"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"delete"),value:"删除"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"search"),value:"查找"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"inorder"),value:"中序遍历"})),r.createElement("div",{ref:"svg",className:"scene"}))},_onChange:function(t){this.setState({text:t.target.value})},_onClick:function(t){s.runDemo(t,this.state.text)}})},77:function(t,n,e){t.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c rb-tree.c rb-tree.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},78:function(t,n,e){t.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "./rb-tree.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint _RED = <span class="number">1</span>;\nint _BLACK = <span class="number">0</span>;\n\nrb_tree * RBTreeCreate() {\n    rb_tree* newTree;\n    rb_tree_node* newNode;\n    newTree = (rb_tree*) SafeMalloc(sizeof(rb_tree));\n    newTree->nil = newNode = (rb_tree_node*) SafeMalloc(sizeof(rb_tree_node));\n    newNode->left = newNode->right = newNode->p = newNode;\n    newNode->key = <span class="number">0</span>;\n    newNode->color = _BLACK;\n    newTree->root = newTree->nil;\n    <span class="keyword">return</span> newTree;\n}\n\nvoid _LeftRotate(rb_tree* t, rb_tree_node* x) {\n    rb_tree_node* y;\n    y = x->right;\n    x->right = y->left;\n    <span class="keyword">if</span> (y->left != t->nil) {\n        y->left->p = x;\n    }\n    y->p = x->p;\n    <span class="keyword">if</span> (x->p == t->nil) {\n        t->root = y;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (x == x->p->left) {\n        x->p->left = y;\n    } <span class="keyword">else</span> {\n        x->p->right = y;\n    }\n    y->left = x;\n    x->p = y;\n}\n\nvoid _RightRotate(rb_tree* t, rb_tree_node* y) {\n    rb_tree_node* x;\n    x = y->left;\n    y->left = x->right;\n    <span class="keyword">if</span> (x->right != t->nil) {\n        x->right->p = y;\n    }\n    x->p = y->p;\n    <span class="keyword">if</span> (y->p == t->nil) {\n        t->root = x;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (y == y->p->right) {\n        y->p->right = x;\n    } <span class="keyword">else</span> {\n        y->p->left = x;\n    }\n    x->right = y;\n    y->p = x;\n}\n\nvoid _InsertFixUp(rb_tree* t, rb_tree_node *z) {\n    rb_tree_node *y;\n    <span class="keyword">while</span> (z->p->color == _RED) {\n        <span class="keyword">if</span> (z->p == z->p->p->left) {\n            y = z->p->p->right;\n            <span class="keyword">if</span> (y->color == _RED) {\n                z->p->color = _BLACK;\n                y->color = _BLACK;\n                z->p->p->color = _RED;\n                z = z->p->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (z == z->p->right) {\n                    z= z->p;\n                    _LeftRotate(t, z);\n                }\n                z->p->color = _BLACK;\n                z->p->p->color = _RED;\n                _RightRotate(t, z->p->p);\n            }\n        } <span class="keyword">else</span> {\n            y = z->p->p->left;\n            <span class="keyword">if</span> (y->color == _RED) {\n                z->p->color = _BLACK;\n                y->color = _BLACK;\n                z->p->p->color = _RED;\n                z = z->p->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (z == z->p->left) {\n                    z= z->p;\n                    _RightRotate(t, z);\n                }\n                z->p->color = _BLACK;\n                z->p->p->color = _RED;\n                _LeftRotate(t, z->p->p);\n            }\n        }\n    }\n    t->root->color = _BLACK;\n}\n\nvoid _Insert(rb_tree* t, rb_tree_node* z) {\n    rb_tree_node* x;\n    rb_tree_node* y;\n    y = t->nil;\n    x = t->root;\n    <span class="keyword">while</span> (x != t->nil) {\n        y = x;\n        <span class="keyword">if</span> (z->key &lt; x->key) {\n            x = x->left;\n        } <span class="keyword">else</span> {\n            x = x->right;\n        }\n    }\n    z->p = y;\n    <span class="keyword">if</span> (y == t->nil) {\n        t->root = z;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (z->key &lt; y->key) {\n        y->left = z;\n    } <span class="keyword">else</span> {\n        y->right = z;\n    }\n    z->left = t->nil;\n    z->right = t->nil;\n    z->color = _RED;\n    _InsertFixUp(t, z);\n}\n\nvoid RBTreeInsert(rb_tree* t, int key) {\n    rb_tree_node* newNode;\n    newNode = (rb_tree_node*) SafeMalloc(sizeof(rb_tree_node));\n    newNode->key = key;\n    _Insert(t, newNode);\n}\n\nvoid _Transplant(rb_tree* t, rb_tree_node* u, rb_tree_node* v) {\n    <span class="keyword">if</span> (u->p == t->nil) {\n        t->root = v;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (u == u->p->left) {\n        u->p->left = v;\n    } <span class="keyword">else</span> {\n        u->p->right = v;\n    }\n    v->p = u->p;\n}\n\nvoid _DeleteFixUp(rb_tree* t, rb_tree_node* x) {\n    int tmp;\n    rb_tree_node* w;\n    <span class="keyword">while</span> (x != t->root &amp;&amp; x->color == _BLACK) {\n        <span class="keyword">if</span> (x == x->p->left) {\n            w = x->p->right;\n            <span class="keyword">if</span> (w->color == _RED) {\n                w->color = _BLACK;\n                x->p->color = _RED;\n                _LeftRotate(t, x->p);\n                w = x->p->right;\n            }\n            <span class="keyword">if</span> (w->left->color == _BLACK &amp;&amp; w->right->color == _BLACK) {\n                w->color = _RED;\n                x = x->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (w->right->color == _BLACK) {\n                    w->left->color = _BLACK;\n                    w->color = _RED;\n                    _RightRotate(t, w);\n                    w = x->p->right;\n                }\n                tmp = x->p->color;\n                x->p->color = _BLACK;\n                w->color = tmp;\n                w->right->color = _BLACK;\n                _LeftRotate(t, x->p);\n                x = t->root;\n            }\n        } <span class="keyword">else</span> {\n            w = x->p->left;\n            <span class="keyword">if</span> (w->color == _RED) {\n                w->color = _BLACK;\n                x->p->color = _RED;\n                _RightRotate(t, x->p);\n                w = x->p->left;\n            }\n            <span class="keyword">if</span> (w->right->color == _BLACK &amp;&amp; w->left->color == _BLACK) {\n                w->color = _RED;\n                x = x->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (w->left->color == _BLACK) {\n                    w->right->color = _BLACK;\n                    w->color = _RED;\n                    _LeftRotate(t,w);\n                    w = x->p->left;\n                }\n                tmp = x->p->color;\n                x->p->color = _BLACK;\n                w->color = tmp;\n                w->left->color = _BLACK;\n                _RightRotate(t, x->p);\n                x = t->root;\n            }\n        }\n    }\n    x->color =_BLACK;\n}\n\nrb_tree_node* _Minimum(rb_tree* t, rb_tree_node *z) {\n    <span class="keyword">while</span> (z->left != t->nil) {\n        z = z->left;\n    }\n    <span class="keyword">return</span> z;\n}\n\nvoid _Delete(rb_tree* t, rb_tree_node *z) {\n    rb_tree_node* x;\n    rb_tree_node* y;\n    int y_original_color;\n    y = z;\n    y_original_color = y->color;\n    <span class="keyword">if</span> (z->left == t->nil) {\n        x = z->right;\n        _Transplant(t, z, z->right);\n    } <span class="keyword">else</span> <span class="keyword">if</span> (z->right == t->nil) {\n        x = z->left;\n        _Transplant(t, z, z->left);\n    } <span class="keyword">else</span> {\n        y = _Minimum(t, z->right);\n        y_original_color = y->color;\n        x = y->right;\n        <span class="keyword">if</span> (y->p == z) {\n            x->p = y;\n        } <span class="keyword">else</span> {\n            _Transplant(t, y, y->right);\n            y->right = z->right;\n            y->right->p = y;\n        }\n        _Transplant(t, z, y);\n        y->left = z->left;\n        y->left->p = y;\n        y->color = z->color;\n    }\n    <span class="keyword">if</span> (y_original_color == _BLACK) {\n        _DeleteFixUp(t, x);\n    }\n}\n\nrb_tree_node* _Search(rb_tree* t, rb_tree_node* x, int k) {\n    <span class="keyword">while</span> (x != t->nil &amp;&amp; k != x->key) {\n        <span class="keyword">if</span> (k &lt; x->key) {\n            x = x->left;\n        } <span class="keyword">else</span> {\n            x = x->right;\n        }\n    }\n    <span class="keyword">return</span> x;\n}\n\nrb_tree_node* RBTreeSearch(rb_tree* t, int k) {\n    <span class="keyword">return</span> _Search(t, t->root, k);\n}\n\nvoid RBTreeDelete(rb_tree* t, int key) {\n    rb_tree_node* newNode = _Search(t, t->root, key);\n    <span class="keyword">if</span> (newNode != t->nil) {\n        _Delete(t, newNode);\n    }\n}\n\nvoid _InorderWalk(rb_tree* t, rb_tree_node* x) {\n    <span class="keyword">if</span> (x != t->nil) {\n        _InorderWalk(t, x->left);\n        printf(<span class="string">"%d "</span>, x->key);\n        _InorderWalk(t, x->right);\n    }\n}\n\nvoid RBTreeInorderWalk(rb_tree* t) {\n    _InorderWalk(t, t->root);\n    printf(<span class="string">"\\n"</span>);\n}\n\nvoid _Destroy(rb_tree* t, rb_tree_node* x) {\n    <span class="keyword">if</span> (x != t->nil) {\n        _Destroy(t, x->left);\n        _Destroy(t, x->right);\n        free(x);\n    }\n}\n\nvoid RBTreeDestroy(rb_tree* t) {\n    _Destroy(t, t->root);\n    free(t->nil);\n}'},79:function(t,n,e){t.exports='<span class="comment">#ifndef RB_TREE_H</span>\n<span class="comment">#define RB_TREE_H</span>\n\ntypedef struct rb_tree_node {\n    int key;\n    int color;\n    struct rb_tree_node* left;\n    struct rb_tree_node* right;\n    struct rb_tree_node* p;\n} rb_tree_node;\n\ntypedef struct rb_tree {\n    rb_tree_node* root;\n    rb_tree_node* nil;\n} rb_tree;\n\nrb_tree* RBTreeCreate();\nvoid RBTreeInsert(rb_tree*, int);\nvoid RBTreeDelete(rb_tree*, int);\nvoid RBTreeDestroy(rb_tree*);\nrb_tree_node* RBTreeSearch(rb_tree*, int);\nvoid RBTreeInorderWalk(rb_tree*);\n\n<span class="comment">#endif</span>'},80:function(t,n,e){t.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include "./rb-tree.h"</span>\n\nint main(int argc, char <span class="keyword">const</span> *argv[]) {\n  int i;\n  int k;\n  rb_tree* rbTree = RBTreeCreate();\n  <span class="keyword">while</span> (scanf(<span class="string">"%d"</span>, &amp;i) != EOF) {\n    scanf(<span class="string">"%d"</span>, &amp;k);\n    <span class="keyword">switch</span> (i) {\n      <span class="keyword">case</span> <span class="number">0</span>:\n        RBTreeInsert(rbTree, k);\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">1</span>:\n        RBTreeDelete(rbTree, k);\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">2</span>:\n        RBTreeSearch(rbTree, k);\n        <span class="keyword">break</span>;\n    }\n    RBTreeInorderWalk(rbTree);\n  }\n  RBTreeDestroy(rbTree);\n  <span class="keyword">return</span> <span class="number">0</span>;\n};'},112:function(t,n,e){function r(){return S.hls.length+1+(S.hl.length?1:0)}function s(t){if(void 0===t.color)return"deepskyblue";var n=R[t.id]+1,e=S.hls.length+1+(S.hl.length?1:0);return e>n&&(n=1),$[t.color](n/e)}function a(t){var n=Math.min(R[t.from],R[t.to])+1,e=S.hls.length+1+(S.hl.length?1:0);return e>n&&(n=1),z.interpolate(0,1)(n/e)}function i(t,n,e){M[t.id]=M[t.id]||{},M[t.id].curr=n}function o(t,n){var e=t.id,r=t[n]?t[n].id:void 0,s=e+n;return void 0!==S.ne[s]&&(r=S.ne[s]),{from:t.id,to:r,type:n,id:s,unconditional:t.nil}}function c(t){B.push(t.id);var n=t.color;return void 0!==S.co[t.id]&&(n=S.co[t.id]),{extra:t.extra,color:n,v:t.key,id:t.id}}function l(t,n){n=n||t.p.id,void 0===M[t.id].prev&&(void 0===M[n]?M[t.id].prev=M[t.id].curr:M[t.id].prev=M[n].prev||M[t.id].curr),(t.p||S.ne[t.id+"p"])&&T.push(o(t,"p")),t.id===S.hl&&(hide=!1),L.push(c(t)),t.left&&(T.push(o(t,"left")),l(t.left,t.id)),t.right&&(T.push(o(t,"right")),l(t.right,t.id)),t.id===S.hl&&(hide=!0)}function p(){L=[],T=[],B=[],R={},R[S.tree.nil.id]=-1===S.hl.indexOf(S.tree.nil.id)?0:r()-1,u(S.tree.root,0);for(var t in M)M[t].prev=M[t].curr;i(S.tree.nil,{x:0,y:1.5*-O}),M[S.tree.nil.id].prev=M[S.tree.nil.id].curr,S.tree.root.nil!==!0&&(i(S.tree.root,{x:0,y:0}),d(S.tree.root.left,0,0,-U,N),d(S.tree.root.right,0,0,U,N)),L.push(c(S.tree.nil)),S.tree.root.nil!==!0&&l(S.tree.root);var n={};for(var e in S.np)n[e]=M[S.np[e]].curr.y;for(var e in S.np)M[e].curr.y=n[e];S.nn&&(L.push(c(S.nn)),i(S.nn,{x:M[S.nn.ref].curr.x,y:M[S.nn.ref].curr.y-(S.nn.extra?O/3:O/2)},1),void 0===M[S.nn.id].prev&&(M[S.nn.id].prev=M[S.nn.ref].curr),void 0!==S.ne[S.nn.id+"p"]&&T.push(o(S.nn,"p")),-1!==S.hl.indexOf(S.nn.id)?R[S.nn.id]=r()-1:R[S.nn.id]=R[S.nn.ref]);for(var e=0;e<T.length;++e){var s=T[e].from,a=T[e].to,p=M[a].curr.x-M[s].curr.x,f=M[a].curr.y-M[s].curr.y,h=Math.sqrt(p*p+f*f),m=j*P;I+m>h?(T[e].dx=0,T[e].dy=0):(T[e].dx=p*(I+m)/h,T[e].dy=f*(I+m)/h)}Object.keys(M).filter(function(t){return-1===B.indexOf(+t)}).forEach(function(t){delete M[t]})}function u(t,n){-1!==S.hls.indexOf(t.id)&&(n=S.hls.lastIndexOf(t.id)+1),-1!==S.hl.indexOf(t.id)?R[t.id]=S.hls.length+1:R[t.id]=n,t.left&&u(t.left,n),t.right&&u(t.right,n)}function d(t,n,e,r,s){if(void 0!==t){var a,o;0>r?(a="right",o="left"):(a="left",o="right");var c=O;return t.nil||void 0===t[a]?i(t,{x:e+r,y:n+c}):i(t,{x:d(t[a],n+c,e,r,t.color)+r,y:n+c}),t.nil||void 0===t[o]?M[t.id].curr.x:d(t[o],n+c,M[t.id].curr.x,r,t.color)}}function f(){E.selectAll("circle.node").data(L,function(t){return t.id}).enter().append("circle").attr("class","node").attr("cx",function(t){return M[t.id].prev.x}).attr("cy",function(t){return M[t.id].prev.y}).attr("r",function(t){return t.extra?I/2:I}).style("fill",function(t){return t.color?"red":"black"}),E.selectAll("circle.node").data(L,function(t){return t.id}).transition().duration(C).attr("cx",function(t){return M[t.id].curr.x}).attr("cy",function(t){return M[t.id].curr.y}).attr("r",function(t){return t.extra?I/2:I}).style("fill",s),E.selectAll("circle.node").data(L,function(t){return t.id}).exit().transition().duration(C).style("opacity",0).remove()}function h(){A.selectAll("line.edge").data(T,function(t){return t.id}).enter().append("line").attr("class","edge").attr("stroke-width",P).attr("x1",function(t){return M[t.from].prev.x+t.dx}).attr("y1",function(t){return M[t.from].prev.y+t.dy}).attr("x2",function(t){return M[t.from].prev.x+t.dx}).attr("y2",function(t){return M[t.from].prev.y+t.dy}).classed("parent",function(t){return"p"===t.type?!0:!1}).classed("child",function(t){return"p"!==t.type?!0:!1}),A.selectAll("line.edge").data(T,function(t){return t.id}).style("marker-end",function(t){return t.id===S.ne.curr?"url(#"+t.type+"-end)":null}).transition().duration(C).attr("x1",function(t){return M[t.from].curr.x+t.dx}).attr("y1",function(t){return M[t.from].curr.y+t.dy}).attr("x2",function(t){return M[t.to].curr.x-t.dx}).attr("y2",function(t){return M[t.to].curr.y-t.dy}).style("opacity",a).style("stroke-dasharray",function(t){return t.unconditional?"5 5":null}),A.selectAll("line.edge").data(T,function(t){return t.id}).exit().transition().duration(C).style("opacity",0).remove()}function m(){_.selectAll("text.node").data(L,function(t){return t.id}).enter().append("text").attr("class","node").attr("x",function(t){return M[t.id].prev.x}).attr("y",function(t){return M[t.id].prev.y}).attr("dy",5),_.selectAll("text.node").data(L,function(t){return t.id}).transition().duration(C).attr("x",function(t){return M[t.id].curr.x}).attr("y",function(t){return M[t.id].curr.y}).style("fill",s).text(function(t){return t.v}),_.selectAll("text.node").data(L,function(t){return t.id}).exit().transition().duration(C).style("opacity",0).remove()}function y(){var t=S.ro?[S.ro.ids]:[];b.selectAll("path.rot").data(t).enter().append("path").attr("class","rot").attr("d",function(t){return this.__prev__=t,"M"+t.map(function(t){return[M[t].curr.x,M[t].curr.y]}).join("L")}).style("fill-opacity",.05).style("opacity",0).transition().duration(C).style("opacity",1),b.selectAll("path.rot").data(t).attr("d",function(t){return this.__prev__=t,"M"+t.map(function(t){return[M[t].curr.x,M[t].curr.y]}).join("L")}),b.selectAll("path.rot").data(t).exit().transition().duration(C).attr("d",function(){for(var t=this.__prev__,n=0;n<t.length;++n)if(void 0===M[t[n]])return"";return"M"+t.map(function(t){return[M[t].curr.x,M[t].curr.y]}).join("L")}).style("opacity",0).remove()}function g(){function t(t){return function(n){return n.reduce(function(n,e){return n+M[e].curr[t]},0)/n.length}}var n=S.ro?[S.ro.ids]:[];_.selectAll("text.rot").data(n).enter().append("text").attr("class","rot").attr("x",t("x")).attr("y",t("y")).attr("dy",5).text(function(){return"left"===S.ro.type?"左旋":"右旋"}).style("fill-opacity",.5),_.selectAll("text.rot").data(n).attr("x",t("x")).attr("y",t("y")).text(function(){return"left"===S.ro.type?"左旋":"右旋"}),_.selectAll("text.rot").data(n).exit().transition().duration(C).style("opacity",0).remove()}function v(t,n){S=t,C=n}function x(t,n){v(t,n),p(),h(),f(),m(),y(),g()}function w(){var t=this,n=z.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){t.svg.attr("transform",D().translate(z.event.translate).scale(z.event.scale))});this.svg=z.select(this.refs.svg.getDOMNode()).append("svg").call(n).append("g"),this.svg.append("defs").selectAll("marker").data(["left","right","p"]).enter().append("marker").attr("id",function(t){return t+"-end"}).attr("viewBox","0 -5 10 10").attr("markerWidth",j).attr("markerHeight",j).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),this.g=this.svg.append("g").attr("transform",D().translate(100,100).scale(1)),this.ghigh=this.g.append("g").attr("class","high"),this.gbase=this.g.append("g").attr("class","base"),this.gtext=this.g.append("g").attr("class","text"),k=this.gbase,A=this.gbase.append("g").attr("class","edges"),E=this.gbase.append("g").attr("class","nodes"),_=this.gtext,b=this.ghigh}var k,_,b,E,A,S,C,z=e(2),D=e(5),M={},L=[],T=[],R={},B=[],U=35,O=70,I=15,N=0,P=3,j=2,$=[z.interpolateRgb("white","black"),z.interpolateRgb("white","red")];t.exports={init:w,render:x}}});