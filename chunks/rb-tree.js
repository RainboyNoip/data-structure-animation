webpackJsonpdsa([6],{6:function(n,e,t){n.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},7:function(n,e,t){n.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},23:function(n,e,s){function a(){return{id:B++,nil:!0,key:"nil",color:q}}function r(n){b(),x(n),k(n,"left");var e;M(23,1),e=n.right,b(e,n),M(24,1),n.right=e.left,E(n,"right"),b(n,e.left),M(25,1),e.left.nil!==!0&&(M(26,1),e.left.p=n,E(e.left,"p"),b(e.left,n)),M(28,1),e.p=n.p,E(e,"p"),b(e,n.p),M(29,1),n.p.nil?(M(30,1),O.root=e,b(e)):(M(31,1),n===n.p.left?(M(32,1),n.p.left=e,E(n.p,"left")):(M(34,1),n.p.right=e,E(n.p,"right"))),M(36,1),e.left=n,E(e,"left"),b(e,n),M(37,1),n.p=e,E(n,"p"),b(n,e),M(37,1),b(),_(),C(),k()}function i(n){b(),x(n),k(n,"right");var e;M(42,1),e=n.left,b(e,n),M(43,1),n.left=e.right,E(n,"left"),b(n,e.right),M(44,1),e.right.nil!==!0&&(M(45,1),e.right.p=n,E(e.right,"p"),b(e.right,n)),M(47,1),e.p=n.p,E(e,"p"),b(e,n.p),M(48,1),n.p.nil?(M(49,1),O.root=e,b(e)):(M(50,1),n===n.p.right?(M(51,1),n.p.right=e,E(n.p,"right")):(M(53,1),n.p.left=e,E(n.p,"left"))),M(55,1),e.right=n,E(e,"right"),b(e,n),M(56,1),n.p=e,E(n,"p"),b(n,e),M(56,1),b(),_(),C(),k()}function o(n){for(var e;M(61,1),_(n),b(n,n.p),n.p.color===N;)M(62,1),_(n.p.p),n.p===n.p.p.left?(M(63,1),e=n.p.p.right,M(64,1),b(e),e.color===N?(M(65,1),n.p.color=q,w(n.p),b(e,n.p),M(66,1),e.color=q,w(e),M(67,1),n.p.p.color=N,w(n.p.p),b(e,n.p,n.p.p),M(68,1),n=n.p.p,b(n)):(M(70,1),b(n.p,n),n===n.p.right&&(M(71,1),n=n.p,b(n),M(72,1),r(n)),M(74,1),n.p.color=q,w(n.p),b(n.p),M(75,1),n.p.p.color=N,w(n.p.p),b(n.p.p),M(76,1),i(n.p.p))):(M(79,1),e=n.p.p.left,M(80,1),b(e),e.color===N?(M(81,1),n.p.color=q,w(n.p),b(e,n.p),M(82,1),e.color=q,w(e),M(83,1),n.p.p.color=N,w(n.p.p),b(e,n.p,n.p.p),M(84,1),n=n.p.p,b(n)):(M(86,1),b(n.p,n),n===n.p.left&&(M(87,1),n=n.p,b(n),M(88,1),i(n),b(),_(),C()),M(90,1),n.p.color=q,w(n.p),b(n.p),M(91,1),n.p.p.color=N,w(n.p.p),b(n.p.p),M(92,1),r(n.p.p),b(),_(),C()));M(96,1),O.root.color=q,C(),b(),_()}function c(n){var e,t;for(M(102),t=O.nil,M(103),e=O.root;M(104,1),_(e),e.nil!==!0;)M(105,1),t=e,M(106),n.key<e.key?(M(107,1),e=e.left,A(n,e)):(M(109,1),e=e.right,A(n,e));_(t),M(112,1),n.p=t,E(n,"p"),M(113,1),t===O.nil?(M(114,1),O.root=n):(M(115,1),n.key<t.key?(M(116,1),t.left=n,E(t,"left")):(M(118,1),t.right=n,E(t,"right"))),_(n),M(120,1),n.left=a(),C(),E(n,"left"),M(121,1),n.right=a(),C(),E(n,"right"),M(122,1),n.color=N,w(n),E(),M(123,1),o(n)}function l(n){var e={};M(128),e.id=B++,M(129),e.key=n,A(e,O.root),M(130,1),c(e)}function p(n,e){x(e),M(134,1),n.p.nil?(M(135,1),O.root=e):(M(136,1),n===n.p.left?(M(137,1),n.p.left=e,E(n.p,"left"),b(n.p,e)):(M(139,1),n.p.right=e,E(n.p,"right"),b(n.p,e))),M(141,1),e.p=n.p,E(e,"p"),b(e,n.p),z(e,n),M(141,1),_(),b()}function u(n,e){b(n);for(var s,a;M(147,1),b(n),n!==O.root&&n.color===q;)M(148,1),n===n.p.left?(M(149,1),a=n.p.right,M(150,1),b(n,a),a.color===N&&(M(151,1),a.color=q,w(a),b(n,a),M(152,1),n.p.color=N,w(n.p),S(n,a,n.p),M(153,1),r(n.p),b(n),A(e,n),M(154,1),a=n.p.right),M(156,1),b(n,a.left,a.right),a.left.color===q&&a.right.color===q?(M(157,1),a.color=N,w(a),S(a),M(158,1),n=n.p,b(n),A(e,n)):(M(160,1),b(n,a.right),a.right.color===q&&(M(161,1),a.left.color=q,w(a.left),S(a.left),M(162,1),a.color=N,w(a),S(a),M(163,1),i(a),b(n),A(e,n),M(164,1),a=n.p.right),M(166,1),s=n.p.color,A(e,n.p),S(n.p),M(167,1),n.p.color=q,w(n.p),e.color=s,A(e,n.p),M(168,1),a.color=s,w(a),S(a),e.color=q,A(e,a),M(169,1),a.right.color=q,w(a.right),S(a.right),e.color=N,A(e,a.right),M(170,1),r(n.p),b(a.right),A(e,a.right),M(171,1),n=O.root,b(n))):(M(174,1),a=n.p.left,M(175,1),b(n,a),a.color===N&&(M(176,1),a.color=q,w(a),b(n,a),M(177,1),n.p.color=N,w(n.p),S(n,a,n.p),M(178,1),i(n.p),b(n),A(e,n),M(179,1),a=n.p.left),M(181,1),b(n,a.left,a.right),a.right.color===q&&a.left.color===q?(M(182,1),a.color=N,w(a),S(a),M(183,1),n=n.p,b(n),A(e,n)):(M(185,1),b(n,a.left),a.left.color===q&&(M(186,1),a.right.color=q,w(a.right),S(a.right),M(187,1),a.color=N,w(a),S(a),M(188,1),r(t,a),b(n),A(e,n),M(189,1),a=n.p.left),M(191,1),s=n.p.color,S(n.p),M(192,1),n.p.color=q,w(n.p),e.color=s,A(e,n.p),M(193,1),a.color=s,w(a),S(a),e.color=q,A(e,a),M(194,1),a.left.color=q,w(a.left),S(a.left),S(a.left),e.color=N,A(e,a.left),M(195,1),i(n.p),b(a.right),A(e,a.right),M(196,1),n=O.root,b(n)));M(200,1),n.color=q,w(n),A()}function d(n,e){var t={id:e,key:"min"};for(A(t,n),b(n);M(204,1),S(n.left),n.left.nil!==!0;)M(205,1),n=n.left,b(n),A(t,n);return M(207,1),b(n),n}function f(n){_(n),b(n);var e,t,s,a={id:B++,extra:!0,key:""};M(214,1),t=n,A(a,n),M(215,1),s=t.color,a.color=t.color,A(a,n),M(216,1),b(n,n.left),n.left.nil?(M(217,1),e=n.right,b(n),M(218,1),p(n,n.right),C()):(M(219,1),b(n,n.right),n.right.nil?(M(220,1),e=n.left,b(n),M(221,1),p(n,n.left),C()):(b(n),M(223,1),t=d(n.right,a.id),delete a.color,A(a,t),b(t),M(224,1),s=t.color,a.color=t.color,A(a,t),M(225,1),e=t.right,M(226,1),t.p===n?(M(227,1),e.p=t,E(e,"p"),S(e)):(M(229,1),p(t,t.right),b(t),M(230,1),t.right=n.right,E(t,"right"),b(t,n.right),z(t,n),M(231,1),t.right.p=t,E(t.right,"p")),M(233,1),p(n,t),b(t),M(234,1),t.left=n.left,E(t,"left"),b(t,n.left),M(235,1),t.left.p=t,E(t.left,"p"),b(t.left,t),M(236,1),t.color=n.color,w(t),C())),A(a,e),_(),b(),M(238,1),b(a),s===q&&(M(239,1),u(e,a)),M(240,1),A(),b(),_()}function h(n,e){var t={id:B++,key:e};for(A(t,O.root);M(244,1),_(n),n.nil!==!0&&e!==n.key;)M(245,1),e<n.key?(M(246,1),n=n.left,A(t,n)):(M(248,1),n=n.right,A(t,n));return _(),b(n),M(251,1),A(),n}function m(n){M(255,1),T=h(O.root,n),M(256,1),A({id:B,key:T.nil!==!0?n:"X"},T)}function g(n){M(259,1);var e=h(O.root,n);M(260,1),e.nil!==!0&&(M(261,1),f(e)),b(),_()}function y(n,e){e.key="递归",A(e,n),M(266,1),n.nil!==!0&&(M(267,1),y(n.left,e),e.key="回溯",A(e,n),M(268,1),S(n),M(269,1),y(n.right,e),e.key="回溯",A(e,n),M(270,1)),M(271,1)}function v(){var n={id:B++,key:"指针"};b(n),M(274,1),y(O.root,n),M(275,1),n.key="完成",A(n,O.root)}function k(n,e){if(void 0===n)U.ro=void 0;else{var t="left"===e?"right":"left",s=[n.id,n[t].id,n[t][t].id,n[t][e].id,n[e].id];U.ro={ids:s,type:e}}}function w(n){void 0===n?U.co={}:(U.co=U.co||{},U.co[n.id]=n.color)}function x(n){U.hls.push(n.id)}function _(n){U.hls.pop(),void 0!==n&&x(n)}function b(){0===arguments.length?U.hl=[]:U.hl=Array.prototype.map.call(arguments,function(n){return n.id})}function S(n){U.hl.push(n.id)}function E(n,e){if(void 0===n)U.ne={};else{var t=n.id+e;U.ne=U.ne||{},U.ne[t]=n[e].id,U.ne.curr=t}}function z(n,e){void 0===n?U.np={}:(U.np=U.np||{},U.np[n.id]=e.id)}function A(n,e){0===arguments.length?U.nn=void 0:U.nn={id:n.id,key:n.key,color:n.color,ref:e.id,extra:n.extra}}function C(){w(),E(),z(),A(),U.lastTree=I(O)}function L(){}function M(n,e,t){1===e&&(lastStatus=U.clone()),P.push({status:lastStatus,line:n,animation:t,id:R}),R++}function D(){M(P[P.length-1].line,1)}var T,I=s(4),P=[],R=0,U={},B=0,N=1,q=0,O={nil:a()};O.root=O.nil,U.clone=function(){return void 0===this.lastTree&&(this.lastTree=I(O)),{tree:this.lastTree,hl:I(this.hl)||[],hls:I(this.hls)||[],ne:I(this.ne)||{},np:I(this.np)||{},nn:I(this.nn),co:I(this.co)||{},ro:I(this.ro)||void 0}},U.init=function(n){n&&(O.root=O.nil),this.hl=[],this.hls=[],this.ne={},this.np={},this.nn=void 0,this.co={},this.ro=void 0},lastStatus={},n.exports={getInitialDescriptions:function(){return this.initialize(!0),l(10),l(1),l(2),l(3),l(4),l(5),this.run("insert","6")},initialize:function(n){return P=[],R=0,U.init(n),lastStatus=U.clone(),this},insert:l,inorder:v,"delete":g,search:m,check:L,run:function(n,e){return this.initialize()[n](isNaN(parseInt(e))?0:parseInt(e)),D(),{frames:P,others:{}}}}},49:function(n,e,t){var s=t(1),a=t(3),r=t(116);n.exports=s.createClass({displayName:"module.exports",getInitialState:function(){return{text:""}},componentDidMount:function(){r.init.bind(this)(),a.runDemo("insert",10),a.runDemo("insert",1),a.runDemo("insert",2),a.runDemo("insert",3),a.runDemo("insert",4),a.runDemo("insert",5,!1)},componentDidUpdate:function(n){this.props!==n&&void 0!==this.props.frame&&r.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){return s.createElement("div",{className:"wrapper-code"},s.createElement("div",{className:"list"},s.createElement("input",{onChange:this._onChange,value:this.state.text,placeholder:"整数"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"insert"),value:"插入"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"delete"),value:"删除"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"search"),value:"查找"}),s.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"inorder"),value:"中序遍历"})),s.createElement("div",{ref:"svg",className:"scene"}))},_onChange:function(n){this.setState({text:n.target.value})},_onClick:function(n){a.runDemo(n,this.state.text)}})},80:function(n,e,t){n.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c rb-tree.c rb-tree.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},81:function(n,e,t){n.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "./rb-tree.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint _RED = <span class="number">1</span>;\nint _BLACK = <span class="number">0</span>;\n\nrb_tree * RBTreeCreate() {\n    rb_tree* newTree;\n    rb_tree_node* newNode;\n    newTree = (rb_tree*) SafeMalloc(sizeof(rb_tree));\n    newTree->nil = newNode = (rb_tree_node*) SafeMalloc(sizeof(rb_tree_node));\n    newNode->left = newNode->right = newNode->p = newNode;\n    newNode->key = <span class="number">0</span>;\n    newNode->color = _BLACK;\n    newTree->root = newTree->nil;\n    <span class="keyword">return</span> newTree;\n}\n\nvoid _LeftRotate(rb_tree* t, rb_tree_node* x) {\n    rb_tree_node* y;\n    y = x->right;\n    x->right = y->left;\n    <span class="keyword">if</span> (y->left != t->nil) {\n        y->left->p = x;\n    }\n    y->p = x->p;\n    <span class="keyword">if</span> (x->p == t->nil) {\n        t->root = y;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (x == x->p->left) {\n        x->p->left = y;\n    } <span class="keyword">else</span> {\n        x->p->right = y;\n    }\n    y->left = x;\n    x->p = y;\n}\n\nvoid _RightRotate(rb_tree* t, rb_tree_node* y) {\n    rb_tree_node* x;\n    x = y->left;\n    y->left = x->right;\n    <span class="keyword">if</span> (x->right != t->nil) {\n        x->right->p = y;\n    }\n    x->p = y->p;\n    <span class="keyword">if</span> (y->p == t->nil) {\n        t->root = x;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (y == y->p->right) {\n        y->p->right = x;\n    } <span class="keyword">else</span> {\n        y->p->left = x;\n    }\n    x->right = y;\n    y->p = x;\n}\n\nvoid _InsertFixUp(rb_tree* t, rb_tree_node *z) {\n    rb_tree_node *y;\n    <span class="keyword">while</span> (z->p->color == _RED) {\n        <span class="keyword">if</span> (z->p == z->p->p->left) {\n            y = z->p->p->right;\n            <span class="keyword">if</span> (y->color == _RED) {\n                z->p->color = _BLACK;\n                y->color = _BLACK;\n                z->p->p->color = _RED;\n                z = z->p->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (z == z->p->right) {\n                    z= z->p;\n                    _LeftRotate(t, z);\n                }\n                z->p->color = _BLACK;\n                z->p->p->color = _RED;\n                _RightRotate(t, z->p->p);\n            }\n        } <span class="keyword">else</span> {\n            y = z->p->p->left;\n            <span class="keyword">if</span> (y->color == _RED) {\n                z->p->color = _BLACK;\n                y->color = _BLACK;\n                z->p->p->color = _RED;\n                z = z->p->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (z == z->p->left) {\n                    z= z->p;\n                    _RightRotate(t, z);\n                }\n                z->p->color = _BLACK;\n                z->p->p->color = _RED;\n                _LeftRotate(t, z->p->p);\n            }\n        }\n    }\n    t->root->color = _BLACK;\n}\n\nvoid _Insert(rb_tree* t, rb_tree_node* z) {\n    rb_tree_node* x;\n    rb_tree_node* y;\n    y = t->nil;\n    x = t->root;\n    <span class="keyword">while</span> (x != t->nil) {\n        y = x;\n        <span class="keyword">if</span> (z->key &lt; x->key) {\n            x = x->left;\n        } <span class="keyword">else</span> {\n            x = x->right;\n        }\n    }\n    z->p = y;\n    <span class="keyword">if</span> (y == t->nil) {\n        t->root = z;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (z->key &lt; y->key) {\n        y->left = z;\n    } <span class="keyword">else</span> {\n        y->right = z;\n    }\n    z->left = t->nil;\n    z->right = t->nil;\n    z->color = _RED;\n    _InsertFixUp(t, z);\n}\n\nvoid RBTreeInsert(rb_tree* t, int key) {\n    rb_tree_node* newNode;\n    newNode = (rb_tree_node*) SafeMalloc(sizeof(rb_tree_node));\n    newNode->key = key;\n    _Insert(t, newNode);\n}\n\nvoid _Transplant(rb_tree* t, rb_tree_node* u, rb_tree_node* v) {\n    <span class="keyword">if</span> (u->p == t->nil) {\n        t->root = v;\n    } <span class="keyword">else</span> <span class="keyword">if</span> (u == u->p->left) {\n        u->p->left = v;\n    } <span class="keyword">else</span> {\n        u->p->right = v;\n    }\n    v->p = u->p;\n}\n\nvoid _DeleteFixUp(rb_tree* t, rb_tree_node* x) {\n    int tmp;\n    rb_tree_node* w;\n    <span class="keyword">while</span> (x != t->root &amp;&amp; x->color == _BLACK) {\n        <span class="keyword">if</span> (x == x->p->left) {\n            w = x->p->right;\n            <span class="keyword">if</span> (w->color == _RED) {\n                w->color = _BLACK;\n                x->p->color = _RED;\n                _LeftRotate(t, x->p);\n                w = x->p->right;\n            }\n            <span class="keyword">if</span> (w->left->color == _BLACK &amp;&amp; w->right->color == _BLACK) {\n                w->color = _RED;\n                x = x->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (w->right->color == _BLACK) {\n                    w->left->color = _BLACK;\n                    w->color = _RED;\n                    _RightRotate(t, w);\n                    w = x->p->right;\n                }\n                tmp = x->p->color;\n                x->p->color = _BLACK;\n                w->color = tmp;\n                w->right->color = _BLACK;\n                _LeftRotate(t, x->p);\n                x = t->root;\n            }\n        } <span class="keyword">else</span> {\n            w = x->p->left;\n            <span class="keyword">if</span> (w->color == _RED) {\n                w->color = _BLACK;\n                x->p->color = _RED;\n                _RightRotate(t, x->p);\n                w = x->p->left;\n            }\n            <span class="keyword">if</span> (w->right->color == _BLACK &amp;&amp; w->left->color == _BLACK) {\n                w->color = _RED;\n                x = x->p;\n            } <span class="keyword">else</span> {\n                <span class="keyword">if</span> (w->left->color == _BLACK) {\n                    w->right->color = _BLACK;\n                    w->color = _RED;\n                    _LeftRotate(t,w);\n                    w = x->p->left;\n                }\n                tmp = x->p->color;\n                x->p->color = _BLACK;\n                w->color = tmp;\n                w->left->color = _BLACK;\n                _RightRotate(t, x->p);\n                x = t->root;\n            }\n        }\n    }\n    x->color =_BLACK;\n}\n\nrb_tree_node* _Minimum(rb_tree* t, rb_tree_node *z) {\n    <span class="keyword">while</span> (z->left != t->nil) {\n        z = z->left;\n    }\n    <span class="keyword">return</span> z;\n}\n\nvoid _Delete(rb_tree* t, rb_tree_node *z) {\n    rb_tree_node* x;\n    rb_tree_node* y;\n    int y_original_color;\n    y = z;\n    y_original_color = y->color;\n    <span class="keyword">if</span> (z->left == t->nil) {\n        x = z->right;\n        _Transplant(t, z, z->right);\n    } <span class="keyword">else</span> <span class="keyword">if</span> (z->right == t->nil) {\n        x = z->left;\n        _Transplant(t, z, z->left);\n    } <span class="keyword">else</span> {\n        y = _Minimum(t, z->right);\n        y_original_color = y->color;\n        x = y->right;\n        <span class="keyword">if</span> (y->p == z) {\n            x->p = y;\n        } <span class="keyword">else</span> {\n            _Transplant(t, y, y->right);\n            y->right = z->right;\n            y->right->p = y;\n        }\n        _Transplant(t, z, y);\n        y->left = z->left;\n        y->left->p = y;\n        y->color = z->color;\n    }\n    <span class="keyword">if</span> (y_original_color == _BLACK) {\n        _DeleteFixUp(t, x);\n    }\n}\n\nrb_tree_node* _Search(rb_tree* t, rb_tree_node* x, int k) {\n    <span class="keyword">while</span> (x != t->nil &amp;&amp; k != x->key) {\n        <span class="keyword">if</span> (k &lt; x->key) {\n            x = x->left;\n        } <span class="keyword">else</span> {\n            x = x->right;\n        }\n    }\n    <span class="keyword">return</span> x;\n}\n\nrb_tree_node* RBTreeSearch(rb_tree* t, int k) {\n    <span class="keyword">return</span> _Search(t, t->root, k);\n}\n\nvoid RBTreeDelete(rb_tree* t, int key) {\n    rb_tree_node* newNode = _Search(t, t->root, key);\n    <span class="keyword">if</span> (newNode != t->nil) {\n        _Delete(t, newNode);\n    }\n}\n\nvoid _InorderWalk(rb_tree* t, rb_tree_node* x) {\n    <span class="keyword">if</span> (x != t->nil) {\n        _InorderWalk(t, x->left);\n        printf(<span class="string">"%d "</span>, x->key);\n        _InorderWalk(t, x->right);\n    }\n}\n\nvoid RBTreeInorderWalk(rb_tree* t) {\n    _InorderWalk(t, t->root);\n    printf(<span class="string">"\\n"</span>);\n}\n\nvoid _Destroy(rb_tree* t, rb_tree_node* x) {\n    <span class="keyword">if</span> (x != t->nil) {\n        _Destroy(t, x->left);\n        _Destroy(t, x->right);\n        free(x);\n    }\n}\n\nvoid RBTreeDestroy(rb_tree* t) {\n    _Destroy(t, t->root);\n    free(t->nil);\n}'},82:function(n,e,t){n.exports='<span class="comment">#ifndef RB_TREE_H</span>\n<span class="comment">#define RB_TREE_H</span>\n\ntypedef struct rb_tree_node {\n    int key;\n    int color;\n    struct rb_tree_node* left;\n    struct rb_tree_node* right;\n    struct rb_tree_node* p;\n} rb_tree_node;\n\ntypedef struct rb_tree {\n    rb_tree_node* root;\n    rb_tree_node* nil;\n} rb_tree;\n\nrb_tree* RBTreeCreate();\nvoid RBTreeInsert(rb_tree*, int);\nvoid RBTreeDelete(rb_tree*, int);\nvoid RBTreeDestroy(rb_tree*);\nrb_tree_node* RBTreeSearch(rb_tree*, int);\nvoid RBTreeInorderWalk(rb_tree*);\n\n<span class="comment">#endif</span>'},83:function(n,e,t){n.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include "./rb-tree.h"</span>\n\nint main(int argc, char <span class="keyword">const</span> *argv[]) {\n  int i;\n  int k;\n  rb_tree* rbTree = RBTreeCreate();\n  <span class="keyword">while</span> (scanf(<span class="string">"%d"</span>, &amp;i) != EOF) {\n    scanf(<span class="string">"%d"</span>, &amp;k);\n    <span class="keyword">switch</span> (i) {\n      <span class="keyword">case</span> <span class="number">0</span>:\n        RBTreeInsert(rbTree, k);\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">1</span>:\n        RBTreeDelete(rbTree, k);\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">2</span>:\n        RBTreeSearch(rbTree, k);\n        <span class="keyword">break</span>;\n    }\n    RBTreeInorderWalk(rbTree);\n  }\n  RBTreeDestroy(rbTree);\n  <span class="keyword">return</span> <span class="number">0</span>;\n};'},116:function(n,e,t){function s(){return z.hls.length+1+(z.hl.length?1:0)}function a(n){if(void 0===n.color)return"deepskyblue";var e=I[n.id]+1,t=z.hls.length+1+(z.hl.length?1:0);return t>e&&(e=1),j[n.color](e/t)}function r(n){var e=Math.min(I[n.from],I[n.to])+1,t=z.hls.length+1+(z.hl.length?1:0);return t>e&&(e=1),C.interpolate(0,1)(e/t)}function i(n,e,t){M[n.id]=M[n.id]||{},M[n.id].curr=e}function o(n,e){var t=n.id,s=n[e]?n[e].id:void 0,a=t+e;return void 0!==z.ne[a]&&(s=z.ne[a]),{from:n.id,to:s,type:e,id:a,unconditional:n.nil}}function c(n){P.push(n.id);var e=n.color;return void 0!==z.co[n.id]&&(e=z.co[n.id]),{extra:n.extra,color:e,v:n.key,id:n.id}}function l(n,e){e=e||n.p.id,void 0===M[n.id].prev&&(void 0===M[e]?M[n.id].prev=M[n.id].curr:M[n.id].prev=M[e].prev||M[n.id].curr),(n.p||z.ne[n.id+"p"])&&T.push(o(n,"p")),n.id===z.hl&&(hide=!1),D.push(c(n)),n.left&&(T.push(o(n,"left")),l(n.left,n.id)),n.right&&(T.push(o(n,"right")),l(n.right,n.id)),n.id===z.hl&&(hide=!0)}function p(){D=[],T=[],P=[],I={},I[z.tree.nil.id]=-1===z.hl.indexOf(z.tree.nil.id)?0:s()-1,u(z.tree.root,0);for(var n in M)M[n].prev=M[n].curr;i(z.tree.nil,{x:0,y:1.5*-U}),M[z.tree.nil.id].prev=M[z.tree.nil.id].curr,z.tree.root.nil!==!0&&(i(z.tree.root,{x:0,y:0}),d(z.tree.root.left,0,0,-R,N),d(z.tree.root.right,0,0,R,N)),D.push(c(z.tree.nil)),z.tree.root.nil!==!0&&l(z.tree.root);var e={};for(var t in z.np)e[t]=M[z.np[t]].curr.y;for(var t in z.np)M[t].curr.y=e[t];z.nn&&(D.push(c(z.nn)),i(z.nn,{x:M[z.nn.ref].curr.x,y:M[z.nn.ref].curr.y-(z.nn.extra?U/3:U/2)},1),void 0===M[z.nn.id].prev&&(M[z.nn.id].prev=M[z.nn.ref].curr),void 0!==z.ne[z.nn.id+"p"]&&T.push(o(z.nn,"p")),-1!==z.hl.indexOf(z.nn.id)?I[z.nn.id]=s()-1:I[z.nn.id]=I[z.nn.ref]);for(var t=0;t<T.length;++t){var a=T[t].from,r=T[t].to,p=M[r].curr.x-M[a].curr.x,f=M[r].curr.y-M[a].curr.y,h=Math.sqrt(p*p+f*f),m=O*q;B+m>h?(T[t].dx=0,T[t].dy=0):(T[t].dx=p*(B+m)/h,T[t].dy=f*(B+m)/h)}Object.keys(M).filter(function(n){return-1===P.indexOf(+n)}).forEach(function(n){delete M[n]})}function u(n,e){-1!==z.hls.indexOf(n.id)&&(e=z.hls.lastIndexOf(n.id)+1),-1!==z.hl.indexOf(n.id)?I[n.id]=z.hls.length+1:I[n.id]=e,n.left&&u(n.left,e),n.right&&u(n.right,e)}function d(n,e,t,s,a){if(void 0!==n){var r,o;0>s?(r="right",o="left"):(r="left",o="right");var c=U;return n.nil||void 0===n[r]?i(n,{x:t+s,y:e+c}):i(n,{x:d(n[r],e+c,t,s,n.color)+s,y:e+c}),n.nil||void 0===n[o]?M[n.id].curr.x:d(n[o],e+c,M[n.id].curr.x,s,n.color)}}function f(){S.selectAll("circle.node").data(D,function(n){return n.id}).enter().append("circle").attr("class","node").attr("cx",function(n){return M[n.id].prev.x}).attr("cy",function(n){return M[n.id].prev.y}).attr("r",function(n){return n.extra?B/2:B}).style("fill",function(n){return n.color?"red":"black"}),S.selectAll("circle.node").data(D,function(n){return n.id}).transition().duration(A).attr("cx",function(n){return M[n.id].curr.x}).attr("cy",function(n){return M[n.id].curr.y}).attr("r",function(n){return n.extra?B/2:B}).style("fill",a),S.selectAll("circle.node").data(D,function(n){return n.id}).exit().transition().duration(A).style("opacity",0).remove()}function h(){E.selectAll("line.edge").data(T,function(n){return n.id}).enter().append("line").attr("class","edge").attr("stroke-width",q).attr("x1",function(n){return M[n.from].prev.x+n.dx}).attr("y1",function(n){return M[n.from].prev.y+n.dy}).attr("x2",function(n){return M[n.from].prev.x+n.dx}).attr("y2",function(n){return M[n.from].prev.y+n.dy}).classed("parent",function(n){return"p"===n.type?!0:!1}).classed("child",function(n){return"p"!==n.type?!0:!1}),E.selectAll("line.edge").data(T,function(n){return n.id}).style("marker-end",function(n){return n.id===z.ne.curr?"url(#"+n.type+"-end)":null}).transition().duration(A).attr("x1",function(n){return M[n.from].curr.x+n.dx}).attr("y1",function(n){return M[n.from].curr.y+n.dy}).attr("x2",function(n){return M[n.to].curr.x-n.dx}).attr("y2",function(n){return M[n.to].curr.y-n.dy}).style("opacity",r).style("stroke-dasharray",function(n){return n.unconditional?"5 5":null}),E.selectAll("line.edge").data(T,function(n){return n.id}).exit().transition().duration(A).style("opacity",0).remove()}function m(){_.selectAll("text.node").data(D,function(n){return n.id}).enter().append("text").attr("class","node").attr("x",function(n){return M[n.id].prev.x}).attr("y",function(n){return M[n.id].prev.y}).attr("dy",5),_.selectAll("text.node").data(D,function(n){return n.id}).transition().duration(A).attr("x",function(n){return M[n.id].curr.x}).attr("y",function(n){return M[n.id].curr.y}).style("fill",a).text(function(n){return n.v}),_.selectAll("text.node").data(D,function(n){return n.id}).exit().transition().duration(A).style("opacity",0).remove()}function g(){var n=z.ro?[z.ro.ids]:[];b.selectAll("path.rot").data(n).enter().append("path").attr("class","rot").attr("d",function(n){return this.__prev__=n,"M"+n.map(function(n){return[M[n].curr.x,M[n].curr.y]}).join("L")}).style("fill-opacity",.05).style("opacity",0).transition().duration(A).style("opacity",1),b.selectAll("path.rot").data(n).attr("d",function(n){return this.__prev__=n,"M"+n.map(function(n){return[M[n].curr.x,M[n].curr.y]}).join("L")}),b.selectAll("path.rot").data(n).exit().transition().duration(A).attr("d",function(){for(var n=this.__prev__,e=0;e<n.length;++e)if(void 0===M[n[e]])return"";return"M"+n.map(function(n){return[M[n].curr.x,M[n].curr.y]}).join("L")}).style("opacity",0).remove()}function y(){function n(n){return function(e){return e.reduce(function(e,t){return e+M[t].curr[n]},0)/e.length}}var e=z.ro?[z.ro.ids]:[];_.selectAll("text.rot").data(e).enter().append("text").attr("class","rot").attr("x",n("x")).attr("y",n("y")).attr("dy",5).text(function(){return"left"===z.ro.type?"左旋":"右旋"}).style("fill-opacity",.5),_.selectAll("text.rot").data(e).attr("x",n("x")).attr("y",n("y")).text(function(){return"left"===z.ro.type?"左旋":"右旋"}),_.selectAll("text.rot").data(e).exit().transition().duration(A).style("opacity",0).remove()}function v(n,e){z=n,A=e}function k(n,e){v(n,e),p(),h(),f(),m(),g(),y()}function w(){var n=this,e=C.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){n.svg.attr("transform",L().translate(C.event.translate).scale(C.event.scale))});this.svg=C.select(this.refs.svg.getDOMNode()).append("svg").call(e).append("g"),this.svg.append("defs").selectAll("marker").data(["left","right","p"]).enter().append("marker").attr("id",function(n){return n+"-end"}).attr("viewBox","0 -5 10 10").attr("markerWidth",O).attr("markerHeight",O).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5"),this.g=this.svg.append("g").attr("transform",L().translate(100,100).scale(1)),this.ghigh=this.g.append("g").attr("class","high"),this.gbase=this.g.append("g").attr("class","base"),this.gtext=this.g.append("g").attr("class","text"),x=this.gbase,E=this.gbase.append("g").attr("class","edges"),S=this.gbase.append("g").attr("class","nodes"),_=this.gtext,b=this.ghigh}var x,_,b,S,E,z,A,C=t(2),L=t(5),M={},D=[],T=[],I={},P=[],R=35,U=70,B=15,N=0,q=3,O=2,j=[C.interpolateRgb("white","black"),C.interpolateRgb("white","red")];n.exports={init:w,render:k}}});