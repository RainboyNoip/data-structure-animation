webpackJsonpdsa([3],{6:function(t,n,e){t.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},7:function(t,n,e){t.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},24:function(t,n,e){function r(t,n,e,r){var a,i;for(a=0;p(7,1),c([a,e-1]),e>a;++a){if(s([a,a]),m.k=t,p(8,1),i=r(n[a],t),o([a]),p(9,1),0===i)return p(10,1),c([a,a]),l(1),a;if(p(11,1),i>0){p(12,1),o();break}o()}return p(15,1),l(-1),-1}function a(t,n,e,r){p(19,1);var a,i=0,u=e-1;for(c([i,u]),s([i,u]),m.k=t;p(20,1),u>i;)p(21,1),a=Math.floor((i+u)/2),c([a,a]),p(22,1),o([a]),r(t,n[a])>0?(p(23,1),i=a+1):(p(25,1),u=a),s([i,u]),c([i,u]),o();return p(28,1),o([i]),0!=r(t,n[i])?(p(29,1),l(-1),-1):(p(31,1),l(1),i)}function s(t){m.p=t||[]}function o(t){m.c=t||[]}function c(t){m.hl=t||[]}function l(t){m.r=t}function p(t,n,e){1===n&&(lastStatus=m.clone()),f.push({status:lastStatus,line:t,animation:e,id:d}),d++}function u(){0===f.length?0:f[f.length-1].line;p(86,1)}var h=e(4),f=[],d=0,m={},y=0,g=[];m.clone=function(){return{arr:g,p:h(this.p)||[],hl:h(this.hl)||[],k:this.k,c:h(this.c)||[],r:this.r}},m.init=function(t){this.p=[],this.c=[],this.hl=[],this.k=void 0,this.r=0},lastStatus={},t.exports={getInitialDescriptions:function(){this.initialize(!0);var t=11,n=[1,1];for(i=2;i<t;++i)n.push(n[i-1]+n[i-2]);return this.run("create",n.join(" "))},initialize:function(t){return f=[],d=0,y=0,m.init(t),lastStatus=m.clone(),this},lsearch:function(t){r(Math.max(1,parseInt(t)),g,g.length,function(t,n){return t-n})},bsearch:function(t){a(Math.max(1,parseInt(t)),g,g.length,function(t,n){return t-n})},create:function(t){g=t.split(" ").map(function(t){return parseInt(t)}).filter(function(t){return t>0}),p(0)},run:function(t,n){return this.initialize()[t](n),u(),{frames:f,others:{}}}}},32:function(t,n,e){n=t.exports=e(8)(),n.push([t.id,"#right-arr path{-webkit-transform-origin:center;-ms-transform-origin:center;transform-origin:center;-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}line.ptr{stroke:#00bfff;stroke-width:10px;stroke-opacity:1}",""])},49:function(t,n,e){var r=e(1),a=e(3),s=e(113);t.exports=r.createClass({displayName:"module.exports",getInitialState:function(){return{text:""}},componentDidMount:function(){s.init.bind(this)(),a.runDemo("create","1 1 2 3 5 8 13 21 34 55 89"),a.runDemo("bsearch",5,!1)},componentDidUpdate:function(t){this.props!==t&&void 0!==this.props.frame&&s.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){return r.createElement("div",{className:"wrapper-code"},r.createElement("div",{className:"list"},r.createElement("input",{onChange:this._onChange,value:this.state.text,placeholder:"数字"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"lsearch"),value:"线性查找",title:"线性查找"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"bsearch"),value:"二分查找",title:"二分查找"}),r.createElement("input",{className:"cmd-button",readOnly:!0,onClick:this._onClick.bind(this,"create"),value:"新数组",title:"新数组"})),r.createElement("div",{ref:"svg",className:"scene"}))},_onChange:function(t){this.setState({text:t.target.value})},_onClick:function(t){a.runDemo(t,this.state.text)}})},81:function(t,n,e){t.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c search.c search.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},82:function(t,n,e){t.exports='<span class="comment">#include &lt;stddef.h></span>\n<span class="comment">#include "search.h"</span>\n\nvoid *LinearSearch (void *k, void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *,<span class="keyword">const</span> void *)) {\n    char *p;\n    int r;\n    <span class="keyword">for</span> (p = (char *)a; p &lt; (char *)a + n*s; p += s) {\n        r = Compare(p, k);\n        <span class="keyword">if</span> (r == <span class="number">0</span>) {\n            <span class="keyword">return</span> p;\n        } <span class="keyword">else</span> <span class="keyword">if</span> (r > <span class="number">0</span>) {\n            <span class="keyword">break</span>;\n        }\n    }\n    <span class="keyword">return</span> <span class="keyword">NULL</span>;\n}\n\nvoid *BinarySearch (void *k, void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *,<span class="keyword">const</span> void *)) {\n    int l = <span class="number">0</span>, m, r = n-<span class="number">1</span>;\n    <span class="keyword">while</span> (l &lt; r) {\n        m = (l+r) / <span class="number">2</span>;\n        <span class="keyword">if</span> (Compare(k, (char *)a + m*s) > <span class="number">0</span>) {\n            l = m+<span class="number">1</span>;\n        } <span class="keyword">else</span> {\n            r = m;\n        }\n    }\n    <span class="keyword">if</span> (Compare(k, (char *)a + l*s) != <span class="number">0</span>) {\n      <span class="keyword">return</span> <span class="keyword">NULL</span>;\n    }\n    <span class="keyword">return</span>  (char *)a + l*s;\n}'},83:function(t,n,e){t.exports='<span class="comment">#ifndef SEARCH_H</span>\n<span class="comment">#define SEARCH_H</span>\n\nvoid *LinearSearch (void *k, void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\nvoid *BinarySearch (void *k, void *a, int n, int s, int(*Compare)(<span class="keyword">const</span> void *, <span class="keyword">const</span> void *));\n\n<span class="comment">#endif</span>'},84:function(t,n,e){t.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;assert.h></span>\n<span class="comment">#include "./search.h"</span>\n<span class="comment">#include "../common/util.h"</span>\n\nint cf(<span class="keyword">const</span> void *a, <span class="keyword">const</span> void *b) {\n    <span class="keyword">return</span> *(int *)a - *(int *)b;\n}\n\nint main(int argc, char <span class="keyword">const</span> *argv[])\n{\n    int i;\n    int n, m;\n    int *a;\n    int x;\n    scanf(<span class="string">"%d%d"</span>, &amp;n, &amp;m);\n    a = SafeMalloc(sizeof(int)*n);\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i) {\n        scanf(<span class="string">"%d"</span>, a+i);\n    }\n    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; ++i) {\n        scanf(<span class="string">"%d"</span>, &amp;x);\n        printf(<span class="string">"test %d search %d "</span>, i+<span class="number">1</span>, x);\n        assert(LinearSearch(&amp;x,a,n,sizeof(int),cf) == BinarySearch(&amp;x,a,n,sizeof(int),cf));\n        printf(<span class="string">"passed\\n"</span>);\n    }\n    printf(<span class="string">"all %d tests passed\\n"</span>, m);\n    <span class="keyword">return</span> <span class="number">0</span>;\n}'},99:function(t,n,e){var r=e(32);"string"==typeof r&&(r=[[t.id,r,""]]);e(9)(r,{})},113:function(t,n,e){function r(){function t(t,n){return f.hl[0]+1<=n&&n<=f.hl[1]+1||0==n?1:.2}var n=[f.k].concat(f.arr);p.selectAll("rect.chart").data(n).enter().append("rect").attr("class","chart").attr("x",function(t,n){return x(n)}).attr("y",function(){return w(0)}).attr("height",0),p.selectAll("rect.chart").data(n).transition().duration(d).attr("x",function(t,n){return x(n)}).attr("y",function(t){return w(t)}).attr("height",function(t){return w(0)-w(t)}).attr("width",function(){return x.rangeBand()}).style("opacity",t).style("fill",function(t,n){return 0===n?_:null}),p.selectAll("rect.chart").data(n).exit().remove(),u.selectAll("text.chart").data(n).enter().append("text").attr("class","chart").attr("x",function(t,n){return x(n)+x.rangeBand()/2}).attr("y",function(){return w(0)}).text(function(t){return t?t:""}),u.selectAll("text.chart").data(n).transition().duration(d).style("opacity",t).attr("x",function(t,n){return x(n)+x.rangeBand()/2}).attr("y",function(t){return w(t)-20}).text(function(t){return t?t:""}),u.selectAll("text.chart").data(n).exit().remove()}function a(){var t=f.c;h.selectAll("rect.cf").data(t).enter().append("rect").attr("class","cf").attr("x",x(0)).attr("y",w(f.k)).attr("height",w(0)-w(f.k)).attr("width",x.rangeBand()).style("opacity",.6).style("fill",_),h.selectAll("rect.cf").data(t).transition().duration(d).attr("width",x.rangeBand()).attr("height",w(0)-w(f.k)).attr("y",w(f.k)).attr("x",function(t){return x(t+1)}),h.selectAll("rect.cf").data(t).exit().remove()}function s(){function t(){return 0===f.r?_:1===f.r?"green":"red"}m.select("#left-arr").select("path").transition().duration(d).style("stroke",t()),m.select("#right-arr").select("path").transition().duration(d).style("stroke",t());var n,e,r,a,s,i,o=f.p;1===o.length?(n="right",e="left",r=s=x(o[0]+1)+x.rangeBand()/2,a=i=w(f.arr[o[0]])-40):2===o.length&&(o[0]===o[1]?(n="left",e=null,r=s=x(o[0]+1)+x.rangeBand()/2,i=w(f.arr[o[0]])-60,a=i-60):(n="left",e="right",r=x(o[0]+1)+10,s=x(o[1]+1)+x.rangeBand()-15,a=i=g+20));var c=0===o.length?[]:[1];p.selectAll("line.ptr").data(c).enter().append("line").attr("class","ptr").attr("x1",r).attr("x2",s).attr("y1",a).attr("y2",i).attr("marker-start",e?"url(#"+e+"-arr)":null).attr("marker-end",n?"url(#"+n+"-arr)":null),p.selectAll("line.ptr").data(c).attr("marker-start",e?"url(#"+e+"-arr)":null).attr("marker-end",n?"url(#"+n+"-arr)":null).transition().duration(d).style("stroke",t).attr("x1",r).attr("x2",s).attr("y1",a).attr("y2",i),p.selectAll("line.ptr").data(c).exit().remove()}function i(){f.k=f.k||0,0===f.hl.length&&(f.hl=[0,f.arr.length-1]),x.domain(m.range(f.arr.length+1)),w.domain([0,Math.max(f.k,m.max(f.arr))])}function o(t,n){f=t,d=n}function c(t,n){o(t,n),i(),r(),a(),s()}function l(){var t=this,n=m.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){t.svg.attr("transform",y().translate(m.event.translate).scale(m.event.scale))});this.svg=m.select(this.refs.svg.getDOMNode()).append("svg").call(n).append("g");this.svg.append("defs").selectAll("marker").data(["left","right"]).enter().append("marker").attr("id",function(t){return t+"-arr"}).attr("viewBox","-5 -5 20 15").attr("markerWidth",b).attr("markerHeight",b).attr("orient","auto").attr("refX",function(t){return"left"===t?7:1}).append("path").attr("d","M0,-5L10,0L0,5").attr("fill","none").attr("stroke",_).attr("stroke-width",3);this.g=this.svg.append("g").attr("transform",y().translate(100,200).scale(.5)),p=this.g.append("g").attr("class","base"),h=this.g.append("g").attr("class","high"),u=this.g.append("g").attr("class","text")}e(99);var p,u,h,f,d,m=e(2),y=e(5),g=600,v=720,x=m.scale.ordinal().rangeRoundBands([0,v],.08),w=m.scale.linear().range([g,0]),b=5,_="deepskyblue";t.exports={init:l,render:c}}});