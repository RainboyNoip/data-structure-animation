webpackJsonpdsa([5],{2:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},3:function(e,n,t){e.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},18:function(e,n,t){e.exports='<span class="comment">#include &lt;stddef.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "../common/util.h"</span>\n<span class="comment">#include "./stack.h"</span>\n\nint StackIsEmpty(stack *s) {\n  <span class="keyword">return</span> s->top > <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;\n}\n\nint StackIsFull(stack *s) {\n  <span class="keyword">return</span> s->top &lt; s->capacity ? <span class="number">0</span> : <span class="number">1</span>;\n}\n\nvoid* StackPop(stack *s) {\n  void *item = <span class="keyword">NULL</span>;\n  <span class="keyword">if</span> (!StackIsEmpty(s)) {\n    item = (char *)s->items + (s->top-<span class="number">1</span>)*s->item_size;\n    s->top--;\n  }\n  <span class="keyword">return</span> item;\n}\n\nvoid* StackPeak(stack *s) {\n  void *item = <span class="keyword">NULL</span>;\n  <span class="keyword">if</span> (!StackIsEmpty(s)) {\n    item = (char *)s->items + (s->top-<span class="number">1</span>)*s->item_size;\n  }\n  <span class="keyword">return</span> item;\n}\n\nvoid* StackPush(stack *s, void *x) {\n  <span class="keyword">if</span> (!StackIsFull(s)) {\n    MemoryCopy((char *)s->items + s->top*s->item_size, x, s->item_size);\n    s->top++;\n    <span class="keyword">return</span> x;\n  }\n  <span class="keyword">return</span> <span class="keyword">NULL</span>;\n}\n\nstack *StackCreate(int n, size_t item_size) {\n  stack *s = SafeMalloc(sizeof(stack));\n  s->capacity = n;\n  s->item_size = item_size;\n  s->top = <span class="number">0</span>;\n  s->items = SafeMalloc(item_size*n);\n  <span class="keyword">return</span> s;\n}\n\nvoid StackDestroy(stack *s) {\n  free(s->items);\n  free(s);\n}'},19:function(e,n,t){e.exports='<span class="comment">#ifndef STACK_H</span>\n<span class="comment">#define STACK_H</span>\n<span class="comment">#include &lt;stddef.h></span>\n\ntypedef struct stack {\n  int top;\n  int capacity;\n  size_t item_size;\n  void *items;\n} stack;\n\nstack *StackCreate(int n, size_t item_size);\nvoid StackDestroy(stack *s);\nint StackIsEmpty(stack *s);\nint StackIsFull(stack *s);\nvoid* StackPop(stack *s);\nvoid* StackPeak(stack *s);\nvoid* StackPush(stack *s, void *x);\n\n<span class="comment">#endif</span>'},37:function(e,n,t){function a(e){currentStatus.stack.push(e)}function s(e){currentStatus.iter[0]=e,void 0===e&&(currentStatus.iter=[])}function r(e){currentStatus.table.push(e),0===e&&(currentStatus.table=[])}function i(e,n){void 0===e?currentStatus.peak=[]:(void 0===currentStatus.peak[e]&&(currentStatus.peak[e]=[]),currentStatus.peak[e].push(n))}function o(e,n,t){1===n&&(lastStatus=p(currentStatus)),d.push({status:lastStatus,line:e,animation:t,id:u}),u++}function c(){o(d[d.length-1].line,1)}var l,p=t(6),d=[],u=0,h=[],m=[],f=function(e,n){return o(5),"+"===e||"-"===e?(r(e),o(6,1),"+"==n||"-"==n||")"===n?(r(n),o(7,1),1):(r(n),o(9,1),-1)):(o(11,1),"*"===e||"/"===e?(r(e),o(12,1),"("===n?(r(n),o(13,1),-1):(r(n),o(15,1),1)):(o(17,1),"("===e?(r(e),o(18,1),")"===n?(r(n),o(19,1),0):(r(n),o(21,1),-1)):(o(24,1),-1)))},g=function(e,n){var t,a,s;switch(o(31,0),t=e[e.length-1],i(0,t),o(32,1),e.pop(),o(33,1),a=e[e.length-1],i(0,a),o(34,1),e.pop(),o(35,1),s=n[n.length-1],i(1,s),o(36,1),n.pop(),o(37,1),s){case"+":o(38),e.push(t+a);break;case"-":o(39),e.push(a-t);break;case"*":o(40),e.push(t*a);break;case"/":o(41),e.push(Math.floor(a/t));break;default:o(42)}i()},y=function(e){var n;for(o(48),h=[],a(h),o(49,1),o(50),m=[],a(m),o(51,1),n=0;o(52,1),s(n),0!=e.length;e=e.slice(1),++n)if(o(53,1),"0"<=e[0]&&e[0]<="9")o(54),h.push(e[0]-"0");else{for(;o(56,1),0!==m.length&&1===(l=f(m[m.length-1],e[0]),o(56,1),r(0),l);)o(57,1),g(h,m);o(59,1),")"===e[0]?(o(60),m.pop()):(o(62),m.push(e[0]))}for(;o(66,1),0!==m.length;)o(67,1),g(h,m);return o(69),i(0,h[h.length-1]),h[h.length-1]};currentStatus={},lastStatus={},e.exports={getInitialDescriptions:function(){return this.run("eval","1*(2+3)")},initialize:function(){return d=[],u=0,currentStatus={stack:[],iter:[],peak:[],table:[]},lastStatus=p(currentStatus),this},eval:function(e){y(e)},run:function(e,n){return this.initialize().eval(n),c(),{frames:d,others:{string:(n.trim()+"=").split("")}}}}},47:function(e,n,t){n=e.exports=t(7)(),n.push([e.id,".op-grid.grid-head{fill:tomato}",""])},77:function(e,n,t){var a=t(1);e.exports=a.createClass({displayName:"module.exports",render:function(){var e={display:this.props.show?"block":"none"};return a.createElement("svg",{className:"legend",width:"210",height:"210",style:e},a.createElement("rect",{className:"outline",stroke:"black",x:"0",y:"0",width:"200",height:"190"}),a.createElement("g",{transform:"translate(15,20)"},a.createElement("g",{transform:"translate(0,0)"},a.createElement("g",{transform:"scale(0.5)"},a.createElement("path",{d:"M0,0L50,0",className:"edge painter-selected",markerEnd:"url(#arrow-end)"}))),a.createElement("g",{transform:"translate(0,25)"},a.createElement("g",{transform:"scale(0.5)"},a.createElement("path",{d:"M0,0L50,0",className:"ine"}))),a.createElement("g",{transform:"translate(6,50)"},a.createElement("circle",{cx:"0",cy:"0",r:"6",className:"node highlighted"})),a.createElement("g",{transform:"translate(6,75)"},a.createElement("circle",{cx:"0",cy:"0",r:"6",className:"node visited"})),a.createElement("g",{transform:"translate(6,100)"},a.createElement("circle",{r:"6",className:"node"}),a.createElement("path",{d:"M0,0L0,-6A6,6 0 0,1 5.19,3Z",className:"inq"})),a.createElement("g",{transform:"translate(6,125)"},a.createElement("circle",{r:"6",className:"node"}),a.createElement("text",{x:"2",y:"-2",fontSize:"10px"},"[a]")),a.createElement("g",{transform:"translate(6,150)"},a.createElement("circle",{r:"6",className:"node"}),a.createElement("text",{x:"2",y:"-2",fontSize:"10px"},"(a,b)")),a.createElement("g",{transform:"translate(0,5)"},a.createElement("text",{x:"40",y:"0"},"当前边"),a.createElement("text",{x:"40",y:"25"},"遍历边"),a.createElement("text",{x:"40",y:"50"},"当前结点"),a.createElement("text",{x:"40",y:"75"},"已访问的结点"),a.createElement("text",{x:"40",y:"100"},"访问中的结点"),a.createElement("text",{x:"40",y:"125"},"结点拓扑序号"),a.createElement("text",{x:"40",y:"150"},"时间戳和最远结点"))))}})},78:function(e,n,t){var a=t(1),s=t(5),r=t(153),i=t(77);e.exports=a.createClass({displayName:"module.exports",getInitialState:function(){return{text:"1*(2+3)",help:!0}},componentDidMount:function(){r.init.bind(this)(),s.runDemo("eval","1*(2+3)",!1)},componentDidUpdate:function(e){this.props!==e&&void 0!==this.props.frame&&r.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){var e=[{button:{demo:"eval",onClick:this._onClick.bind(this,"eval"),value:"计算"},items:[{onChange:this._onChange,value:this.state.text,placeholder:"表达式"}]},{button:{help:this.state.help,onClick:this._onHelp,value:"帮助"}}],n=this;return a.createElement("div",{className:"wrapper-code"},a.createElement("div",{className:"list"},e.map(function(e,t){var s="input-group"+(e.button.help||e.button.demo===n.state.demo?" input-current":""),r=e.items?e.items:[];return a.createElement("div",{key:t,className:s},a.createElement("input",{className:"input-button",readOnly:!0,onClick:e.button.onClick,value:e.button.value,title:e.button.value}),a.createElement("div",null,r.map(function(e,n){return a.createElement("input",{key:n,className:"input-item",onChange:e.onChange,value:e.value,title:e.value,placeholder:e.placeholder})})))})),a.createElement("div",{ref:"svg",className:"scene"}),a.createElement(i,{show:this.state.help}))},_onChange:function(e){this.setState({text:e.target.value})},_onClick:function(e){s.runDemo(e,this.state.text)},_onHelp:function(){this.setState({help:!this.state.help})}})},123:function(e,n,t){e.exports='CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c stack-<span class="keyword">eval</span>.c ../stack/stack.c ../common/util.c\nOBJECTS=$(SOURCES:.c=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out'},124:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "../stack/stack.h"</span>\n\nint prior(char instack, char coming) {\n    <span class="keyword">if</span> (instack == <span class="string">\'+\'</span> || instack == <span class="string">\'-\'</span>) {\n        <span class="keyword">if</span> (coming == <span class="string">\'+\'</span> || coming == <span class="string">\'-\'</span> || coming == <span class="string">\')\'</span>) {\n            <span class="keyword">return</span> <span class="number">1</span>;\n        } <span class="keyword">else</span> {\n            <span class="keyword">return</span> -<span class="number">1</span>;\n        }\n    } <span class="keyword">else</span> <span class="keyword">if</span> (instack == <span class="string">\'*\'</span> || instack == <span class="string">\'/\'</span>) {\n        <span class="keyword">if</span> (coming == <span class="string">\'(\'</span>) {\n            <span class="keyword">return</span> -<span class="number">1</span>;\n        } <span class="keyword">else</span> {\n            <span class="keyword">return</span> <span class="number">1</span>;\n        }\n    } <span class="keyword">else</span> <span class="keyword">if</span> (instack == <span class="string">\'(\'</span>) {\n        <span class="keyword">if</span> (coming == <span class="string">\')\'</span>) {\n            <span class="keyword">return</span> <span class="number">0</span>;\n        } <span class="keyword">else</span> {\n            <span class="keyword">return</span> -<span class="number">1</span>;\n        }\n    }\n    <span class="keyword">return</span> -<span class="number">1</span>;\n};\n\nvoid poppush(stack *nums, stack *ops) {\n    int a;\n    int b;\n    int op;\n    a = *(int *)StackPeak(nums);\n    StackPop(nums);\n    b = *(int *)StackPeak(nums);\n    StackPop(nums);\n    op = *(char *)StackPeak(ops);\n    StackPop(ops);\n    <span class="keyword">switch</span>(op) {\n        <span class="keyword">case</span> <span class="string">\'+\'</span>: a = a+b; StackPush(nums, &amp;a); <span class="keyword">break</span>;\n        <span class="keyword">case</span> <span class="string">\'-\'</span>: a = b-a; StackPush(nums, &amp;a); <span class="keyword">break</span>;\n        <span class="keyword">case</span> <span class="string">\'*\'</span>: a = a*b; StackPush(nums, &amp;a); <span class="keyword">break</span>;\n        <span class="keyword">case</span> <span class="string">\'/\'</span>: a = b/a; StackPush(nums, &amp;a); <span class="keyword">break</span>;\n        <span class="keyword">default</span>: <span class="keyword">break</span>;\n    }\n};\n\nint <span class="keyword">eval</span>(char *str) {\n    int l = strlen(str);\n    int num;\n    char op;\n    stack *nums = StackCreate(l, sizeof(int));\n    stack *ops = StackCreate(l, sizeof(char));\n    <span class="keyword">for</span> (; *str != <span class="string">\'\\0\'</span>; str++) {\n        <span class="keyword">if</span> (<span class="string">\'0\'</span> &lt;= *str &amp;&amp; *str &lt;= <span class="string">\'9\'</span>) {\n            num = (int)(*str - <span class="string">\'0\'</span>);\n            StackPush(nums, &amp;num);\n        } <span class="keyword">else</span> {\n            <span class="keyword">while</span> (StackIsEmpty(ops) == <span class="number">0</span> &amp;&amp; prior(*(char *)StackPeak(ops), *str) == <span class="number">1</span>) {\n                poppush(nums, ops);\n            }\n            <span class="keyword">if</span> (*str == <span class="string">\')\'</span>) {\n                StackPop(ops);\n            } <span class="keyword">else</span> {\n                op = *str;\n                StackPush(ops, &amp;op);\n            }\n        }\n    }\n    <span class="keyword">while</span> (StackIsEmpty(ops) == <span class="number">0</span>) {\n        poppush(nums, ops);\n    }\n    num = *(int *)StackPeak(nums);\n    StackDestroy(nums);\n    StackDestroy(ops);\n    <span class="keyword">return</span> num;\n};'},125:function(e,n,t){e.exports='int <span class="keyword">eval</span>(char *expr);'},126:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include "./stack-eval.h"</span>\n\nint main(int argc, char <span class="keyword">const</span> *argv[]) {\n  char s[<span class="number">100</span>];\n  <span class="keyword">while</span> (scanf(<span class="string">"%s"</span>, s) != EOF) {\n    printf(<span class="string">"%s = %d\\n"</span>, s, <span class="keyword">eval</span>(s));\n  }\n  <span class="keyword">return</span> <span class="number">0</span>;\n}'},137:function(e,n,t){var a=t(47);"string"==typeof a&&(a=[[e.id,a,""]]);t(9)(a,{})},153:function(e,n,t){function a(){var e=v.string.map(function(e,n){var t=g.iter[0]||0;return{v:e,i:n-t}});h.selectAll("rect.char").data(e).enter().append("rect").attr("class","char").attr("width","100").attr("height","50").transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i,0]})),h.selectAll("rect.char").data(e).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i,0]})),h.selectAll("rect.char").data(e).exit().transition().duration(y).remove(),m.selectAll("text.char").data(e).enter().append("text").attr("class","char").attr("transform",w().translate(function(e,n){return[50,30]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i+50,30]})).text(function(e){return e.v}),m.selectAll("text.char").data(e).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i+50,30]})).text(function(e){return e.v}),m.selectAll("text.char").data(e).exit().transition().duration(y).remove()}function s(){var e=k.range(g.stack.length);h.selectAll("rect.stack").data(e).enter().append("rect").attr("class","stack").attr("width",100).attr("height",250).attr("transform",w().translate(function(e,n){return[100*n,0]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*n,150]})),h.selectAll("rect.stack").data(e).exit().transition().duration(y).remove()}function r(){h.selectAll("rect.stack-top").data(g.stack).enter().append("rect").attr("class","stack-top").attr("width",100).attr("height",50).attr("transform",w().translate(function(e,n){return[100*n,0]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*n,150+50*(5-e.length-1)]})),h.selectAll("rect.stack-top").data(g.stack).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*n,150+50*(5-e.length-1)]})),h.selectAll("rect.stack-top").data(g.stack).exit().transition().duration(y).remove(),m.selectAll("text.stack-top").data(g.stack).enter().append("text").attr("class","stack-top").attr("transform",w().translate(function(e,n){return[100*n+50,30]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*n+50,150+50*(5-e.length-1)+25+5]})).text(function(){return"栈顶"}),m.selectAll("text.stack-top").data(g.stack).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*n+50,150+50*(5-e.length-1)+25+5]})),m.selectAll("text.stack-top").data(g.stack).exit().transition().duration(y).remove()}function i(){var e=g.stack.reduce(function(e,n,t){return e.concat(n.map(function(e,n){return{v:e,i:t,j:n}}))},[]),n=function(e){return(e.i?"ops":"nums")+e.j};h.selectAll("rect.item").data(e,n).enter().append("rect").attr("class","item").attr("width",100).attr("height",50).attr("transform",w().translate(function(e){return[100*e.i,100]})).transition().duration(y).attr("transform",w().translate(function(e){return[100*e.i,150+50*(5-e.j-1)]})),h.selectAll("rect.item").data(e,n).transition().duration(y).attr("transform",w().translate(function(e){return[100*e.i,150+50*(5-e.j-1)]})),h.selectAll("rect.item").data(e,n).exit().transition().duration(y).remove(),m.selectAll("text.item").data(e,n).enter().append("text").attr("class","item").attr("transform",w().translate(function(e){return[100*e.i+50,130]})).transition().duration(y).attr("transform",w().translate(function(e){return[100*e.i+50,150+50*(5-e.j-1)+25+5]})).text(function(e){return e.v}),m.selectAll("text.item").data(e,n).transition().duration(y).attr("transform",w().translate(function(e){return[100*e.i+50,150+50*(5-e.j-1)+25+5]})).text(function(e){return e.v}),m.selectAll("text.item").data(e,n).exit().transition().duration(y).remove()}function o(){var e=g.peak.reduce(function(e,n,t){return e.concat(n.map(function(e,n){return{v:e,i:t,j:n}}))},[]);h.selectAll("rect.peak").data(e).enter().append("rect").attr("class","peak").attr("width",100).attr("height",50).attr("transform",w().translate(function(e,n){g.stack[e.i].length-1;return[100*e.i,150+50*(5-e.j-1)]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i,50+50*(2-e.j-1)]})),h.selectAll("rect.peak").data(e).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i,50+50*(2-e.j-1)]})),h.selectAll("rect.peak").data(e).exit().transition().duration(y).remove(),m.selectAll("text.peak").data(e).enter().append("text").attr("class","peak").attr("transform",w().translate(function(e,n){g.stack[e.i].length-1;return[100*e.i+50,150+50*(5-e.j-1)+25+5]})).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i+50,50+50*(2-e.j-1)+25+5]})).text(function(e){return e.v}),m.selectAll("text.peak").data(e).transition().duration(y).attr("transform",w().translate(function(e,n){return[100*e.i+50,50+50*(2-e.j-1)+25+5]})).text(function(e){return e.v}),m.selectAll("text.peak").data(e).exit().transition().duration(y).remove()}function c(){f.selectAll("rect.char").data(g.iter).enter().append("rect").attr("class","char").attr("width",100).attr("height",50).transition().duration(y).attr("transform",w().translate(function(e){return[0,0]})),f.selectAll("rect.char").data(g.iter).exit().transition().duration(y).remove()}function l(){var e=g.table.map(function(e,n){var t=x[0].indexOf(e);return k.range(7).map(function(e){return n?{r:e,c:t,t:n}:{r:t,c:e,t:n}})}).reduce(function(e,n){return e.concat(n)},[]);f.selectAll("rect.op-grid").data(e).enter().append("rect").attr("class","op-grid").attr("width",function(e){return e.t?0:50}).attr("height",function(e){return e.t?50:0}).attr("transform",w().translate(function(e){return e.t?[200,50+50*e.r]:[200+50*e.c,50]})).transition().duration(y).attr("width",50).attr("height",50).attr("transform",w().translate(function(e){return[200+50*e.c,50+50*e.r]}));var n=f.selectAll("rect.op-grid").data(e).exit(),t=n[0].map(function(e){return e.__data__}).sort(function(e,n){return e.r===n.r?e.c-n.c:e.r-n.r}).reduce(function(e,n,t){return e.s||e.r===n.r&&e.c===n.c?{r:e.r,c:e.c,s:1}:n},[]);t.r=t.r||0,t.c=t.c||0,n.transition().duration(y/2).attr("transform",w().translate(function(e,n,a){return[200+50*t.c,50+50*t.r]})).transition().duration(y/2).remove()}function p(e,n,t){g=e,y=n,v=t}function d(e,n,t){p(e,n,t),a(),s(),r(),i(),o(),c(),l()}function u(){var e=this,n=k.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){e.svg.attr("transform",w().translate(k.event.translate).scale(k.event.scale))});this.svg=k.select(this.refs.svg.getDOMNode()).append("svg").call(n).append("g"),this.g=this.svg.append("g").attr("transform",w().translate(10,10).scale(1)),this.gbase=this.g.append("g").attr("class","base"),this.ghigh=this.g.append("g").attr("class","high"),this.gtext=this.g.append("g").attr("class","text"),this.gbase.selectAll("rect.op-grid").data(k.range(49).map(function(e){return{r:Math.floor(e/7),c:e%7}})).enter().append("rect").attr("class","op-grid").classed("grid-head",function(e){return 0===e.r||0===e.c}).attr("transform",w().translate(function(e,n){return[200+50*e.c,50+50*e.r]})).attr("width",function(e){return(e.r+e.c)%2?0:50}).attr("height",function(e){return(e.r+e.c)%2?50:0}).transition().duration(.75*this.props.delay).attr("width",50).attr("height",50),this.gtext.selectAll("text.op-grid").data(x.reduce(function(e,n,t){return e.concat(n.map(function(e,n){return{v:e,r:t,c:n}}))},[])).enter().append("text").attr("class","op-grid").attr("transform",w().translate(function(e,n){return[200+50*e.c+25,50+50*e.r+25+5]})).text("").transition().duration(.75*this.props.delay).text(function(e){return e.v}),h=this.gbase,m=this.gtext,f=this.ghigh,v=this.props.others}t(137);var h,m,f,g,y,v,k=t(4),w=t(8),x=[["#","+","-","*","/","(",")"],["+",">",">","<","<","<",">"],["-",">",">","<","<","<",">"],["*",">",">",">",">","<",">"],["/",">",">",">",">","<",">"],["(","<","<","<","<","<","<"],[")","/","/","/","/","/","/"]];e.exports={init:u,render:d}}});