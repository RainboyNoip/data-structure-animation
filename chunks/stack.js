webpackJsonpdsa([9],{2:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include &lt;string.h></span>\n<span class="comment">#include "./util.h"</span>\n\nvoid* SafeMalloc(size_t size) {\n    void* m;\n    <span class="keyword">if</span> ((m = malloc(size))) {\n        <span class="keyword">return</span> m;\n    } <span class="keyword">else</span> {\n        printf(<span class="string">"memory overflow\\n"</span>);\n        <span class="keyword">exit</span>(-<span class="number">1</span>);\n        <span class="keyword">return</span> <span class="number">0</span>;\n    }\n}\n\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">// }</span>\n    memcpy(a, b, size);\n}\n\nvoid MemorySwap(void *a, void *b, size_t size) {\n    <span class="comment">// size_t i;</span>\n    <span class="comment">// size_t n = size / sizeof(char);</span>\n    <span class="comment">// char t;</span>\n    <span class="comment">// for (i = 0; i &lt; n; ++i) {</span>\n    <span class="comment">//     t = *(char *)a;</span>\n    <span class="comment">//     *((char *)a + i) = *((char *)b + i);</span>\n    <span class="comment">//     *((char *)b + i) = t;</span>\n    <span class="comment">// }</span>\n    void *t = SafeMalloc(size);\n    memcpy(t, a, size);\n    memcpy(a, b, size);\n    memcpy(b, t, size);\n}\n\nvoid MemoryClear(void *a, size_t size) {\n    memset(a, <span class="number">0</span>, size);\n}\n\nvoid *MemoryAddress(void *a, int i, size_t size) {\n    <span class="keyword">return</span> (char *)a + i*size;\n}'},3:function(e,n,t){e.exports='<span class="comment">#ifndef UTIL_H</span>\n<span class="comment">#define UTIL_H</span>\n\n<span class="comment">#include &lt;stddef.h></span>\n\nvoid * SafeMalloc(size_t size);\nvoid MemoryCopy(void *a, <span class="keyword">const</span> void *b, size_t size);\nvoid MemorySwap(void *a, void *b, size_t size);\nvoid MemoryClear(void *a, size_t size);\n\n<span class="comment">#endif</span>'},18:function(e,n,t){e.exports='<span class="comment">#include &lt;stddef.h></span>\n<span class="comment">#include &lt;stdlib.h></span>\n<span class="comment">#include "../common/util.h"</span>\n<span class="comment">#include "./stack.h"</span>\n\nint StackIsEmpty(stack *s) {\n  <span class="keyword">return</span> s->top > <span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>;\n}\n\nint StackIsFull(stack *s) {\n  <span class="keyword">return</span> s->top &lt; s->capacity ? <span class="number">0</span> : <span class="number">1</span>;\n}\n\nvoid* StackPop(stack *s) {\n  void *item = <span class="keyword">NULL</span>;\n  <span class="keyword">if</span> (!StackIsEmpty(s)) {\n    item = (char *)s->items + (s->top-<span class="number">1</span>)*s->item_size;\n    s->top--;\n  }\n  <span class="keyword">return</span> item;\n}\n\nvoid* StackPeak(stack *s) {\n  void *item = <span class="keyword">NULL</span>;\n  <span class="keyword">if</span> (!StackIsEmpty(s)) {\n    item = (char *)s->items + (s->top-<span class="number">1</span>)*s->item_size;\n  }\n  <span class="keyword">return</span> item;\n}\n\nvoid* StackPush(stack *s, void *x) {\n  <span class="keyword">if</span> (!StackIsFull(s)) {\n    MemoryCopy((char *)s->items + s->top*s->item_size, x, s->item_size);\n    s->top++;\n    <span class="keyword">return</span> x;\n  }\n  <span class="keyword">return</span> <span class="keyword">NULL</span>;\n}\n\nstack *StackCreate(int n, size_t item_size) {\n  stack *s = SafeMalloc(sizeof(stack));\n  s->capacity = n;\n  s->item_size = item_size;\n  s->top = <span class="number">0</span>;\n  s->items = SafeMalloc(item_size*n);\n  <span class="keyword">return</span> s;\n}\n\nvoid StackDestroy(stack *s) {\n  free(s->items);\n  free(s);\n}'},19:function(e,n,t){e.exports='<span class="comment">#ifndef STACK_H</span>\n<span class="comment">#define STACK_H</span>\n<span class="comment">#include &lt;stddef.h></span>\n\ntypedef struct stack {\n  int top;\n  int capacity;\n  size_t item_size;\n  void *items;\n} stack;\n\nstack *StackCreate(int n, size_t item_size);\nvoid StackDestroy(stack *s);\nint StackIsEmpty(stack *s);\nint StackIsFull(stack *s);\nvoid* StackPop(stack *s);\nvoid* StackPeak(stack *s);\nvoid* StackPush(stack *s, void *x);\n\n<span class="comment">#endif</span>'},38:function(e,n,t){function a(e){currentStatus.topush=void 0===e?[]:[e]}function s(e){currentStatus.stacktop=void 0===e?[]:[1]}function r(e){currentStatus.topeak=[e]}function i(e,n,t){1===n&&(lastStatus=l(currentStatus)),p.push({status:lastStatus,line:e,animation:t,id:u}),u++}function o(){p[p.length-1]&&i(p[p.length-1].line,1)}var c,l=t(8),p=[],u=0,d=[],m=5,h=function(){return s(1),i(7,1),0===d.length?!0:(s(),!1)},f=function(){return s(1),i(11,1),d.length===m?!0:(s(),!1)},g=function(){i(16,1),h()||(i(18,1),d.pop()),i(20,1)},y=function(){return i(25,1),h()?void i(28,1):(i(26,1),c=d[d.length-1],r(c),c)},v=function(e){return a(e),i(32,1),f()?void i(37,1):(i(34,1),d.push(e),a(),void i(35,1))},k=function(){d=[],currentStatus.stack=d};currentStatus={},lastStatus={},e.exports={getInitialDescriptions:function(){return this.initialize(!0),v(0),v(50),this.run("push",100)},initialize:function(e){return p=[],u=0,e&&(d=[]),currentStatus={stack:d,topush:[],topeak:[],stacktop:[]},lastStatus=l(currentStatus),this},push:v,pop:g,peak:y,init:function(){k(),i(0)},run:function(e,n){return this.initialize()[e](n),o(),{frames:p}},reset:function(){this.initialize(!0)}}},81:function(e,n,t){var a=t(1);e.exports=a.createClass({displayName:"module.exports",render:function(){var e={display:this.props.show?"block":"none"};return a.createElement("svg",{className:"legend",width:"210",height:"70",style:e},a.createElement("rect",{className:"outline",stroke:"black",x:"0",y:"0",width:"200",height:"60"}),a.createElement("g",{transform:"translate(15,10)"},a.createElement("g",{transform:"translate(0,0)"},a.createElement("rect",{width:"30",height:"15",fill:"brown"})),a.createElement("g",{transform:"translate(0,25)"},a.createElement("rect",{width:"30",height:"15",fill:"coral"})),a.createElement("g",{transform:"translate(0,14)"},a.createElement("text",{x:"40",y:"0"},"栈"),a.createElement("text",{x:"40",y:"25"},"数据"))))}})},82:function(e,n,t){var a=t(1),s=t(7),r=t(157),i=t(81);e.exports=a.createClass({displayName:"module.exports",getInitialState:function(){return{text:"1",demo:"push",help:!0}},componentDidMount:function(){r.init.bind(this)(),s.runDemo("init"),s.runDemo("push",1,!1)},componentDidUpdate:function(e){this.props!==e&&void 0!==this.props.frame&&r.render(this.props.frame.status,this.props.delay,this.props.others)},render:function(){var e=[{button:{demo:"push",onClick:this._onClick.bind(this,"push"),value:"入栈"},items:[{onChange:this._onChange,value:this.state.text,placeholder:"整数"}]},{button:{demo:"pop",onClick:this._onClick.bind(this,"pop"),value:"出栈"}},{button:{demo:"peak",onClick:this._onClick.bind(this,"peak"),value:"栈顶"}},{button:{demo:"reset",onClick:this._onReset,value:"重置"}},{button:{help:this.state.help,onClick:this._onHelp,value:"帮助"}}],n=this;return a.createElement("div",{className:"wrapper-code"},a.createElement("div",{className:"list"},e.map(function(e,t){var s="input-group"+(e.button.help||e.button.demo===n.state.demo?" input-current":""),r=e.items?e.items:[];return a.createElement("div",{key:t,className:s},a.createElement("input",{className:"input-button",readOnly:!0,onClick:e.button.onClick,value:e.button.value,title:e.button.value}),a.createElement("div",null,r.map(function(e,n){return a.createElement("input",{key:n,className:"input-item",onChange:e.onChange,value:e.value,title:e.value,placeholder:e.placeholder})})))})),a.createElement("div",{ref:"svg",className:"scene"}),a.createElement(i,{show:this.state.help}))},_onChange:function(e){this.setState({text:e.target.value})},_onClick:function(e){this.setState({demo:e}),s.runDemo(e,this.state.text)},_onReset:function(){s.runDemo("reset"),s.pauseDemo(),s.waitDemo(),r.clear()},_onHelp:function(){this.setState({help:!this.state.help})}})},129:function(e,n,t){e.exports="CC=gcc\nCFLAGS=-c -Wall\nLDFLAGS=\nSOURCES=test.c stack.c stack.h ../common/util.c ../common/util.h\nOBJECTS=$(SOURCES:.cpp=.o)\nEXECUTABLE=a.out\n\nall: $(SOURCES) $(EXECUTABLE)\n\n$(EXECUTABLE): $(OBJECTS)\n    $(CC) $(LDFLAGS) $(OBJECTS) -o $@\n\n.cpp.o:\n    $(CC) $(CFLAGS) $&lt; -o $@\n\nclean:\n    rm -rf *.o a.out"},130:function(e,n,t){e.exports='<span class="comment">#include &lt;stdio.h></span>\n<span class="comment">#include "./stack.h"</span>\n\nint main(int argc, char <span class="keyword">const</span> *argv[]) {\n  int cmd;\n  int a;\n  int *b;\n  stack *s = StackCreate(<span class="number">10</span>, sizeof(int));\n  <span class="keyword">while</span> (scanf(<span class="string">"%d"</span>, &amp;cmd) != EOF) {\n    <span class="keyword">switch</span>(cmd) {\n      <span class="keyword">case</span> <span class="number">0</span>:\n        scanf(<span class="string">"%d\\n"</span>, &amp;a);\n        b = StackPush(s, &amp;a);\n        <span class="keyword">if</span> (b == <span class="keyword">NULL</span>) {\n          printf(<span class="string">"push null\\n"</span>);\n        } <span class="keyword">else</span> {\n          printf(<span class="string">"push %d\\n"</span>, *b);\n        }\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">1</span>:\n        b = StackPeak(s);\n        <span class="keyword">if</span> (b == <span class="keyword">NULL</span>) {\n          printf(<span class="string">"peak null\\n"</span>);\n        } <span class="keyword">else</span> {\n          printf(<span class="string">"peak %d\\n"</span>, *b);\n        }\n        <span class="keyword">break</span>;\n      <span class="keyword">case</span> <span class="number">2</span>:\n        b = StackPop(s);\n        <span class="keyword">if</span> (b == <span class="keyword">NULL</span>) {\n          printf(<span class="string">"pop null\\n"</span>);\n        } <span class="keyword">else</span> {\n          printf(<span class="string">"pop %d\\n"</span>, *b);\n        }\n        <span class="keyword">break</span>;\n      <span class="keyword">default</span>:\n        <span class="keyword">break</span>;\n    }\n  }\n  StackDestroy(s);\n  <span class="keyword">return</span> <span class="number">0</span>;\n};'},157:function(e,n,t){function a(){u.selectAll("rect.stack-top").data([h.stack.length]).enter().append("rect").attr("class","stack-top").attr("width",100).attr("height",50).attr("transform",y().translate(function(){return[0,-50]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[0,50*(5-e-1)]})),u.selectAll("rect.stack-top").data([h.stack.length]).transition().duration(f).attr("transform",y().translate(function(e,n){return[0,50*(5-e-1)]})),d.selectAll("text.stack-top").data([h.stack.length]).enter().append("text").attr("class","stack-top").attr("transform",y().translate(function(e,n){return[50,-20]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[50,50*(5-e-1)+25+5]})).text(function(){return"栈顶"}),d.selectAll("text.stack-top").data([h.stack.length]).transition().duration(f).attr("transform",y().translate(function(e,n){return[50,50*(5-e-1)+25+5]}))}function s(){u.selectAll("rect.item").data(h.stack).enter().append("rect").attr("class","item").attr("width",100).attr("height",50).attr("transform",y().translate(function(e){return[0,-100]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[0,50*(5-n-1)]})),u.selectAll("rect.item").data(h.stack).transition().duration(f).attr("transform",y().translate(function(e,n){return[0,50*(5-n-1)]})),u.selectAll("rect.item").data(h.stack).exit().transition().duration(f).remove(),d.selectAll("text.item").data(h.stack).enter().append("text").attr("class","item").attr("transform",y().translate(function(e){return[50,-70]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[50,50*(5-n-1)+25+5]})).text(function(e){return e}),d.selectAll("text.item").data(h.stack).transition().duration(f).attr("transform",y().translate(function(e,n){return[50,50*(5-n-1)+25+5]})).text(function(e){return e}),d.selectAll("text.item").data(h.stack).exit().transition().duration(f).remove()}function r(){u.selectAll("rect.peak").data(h.topeak).enter().append("rect").attr("class","peak").attr("width",100).attr("height",50).attr("transform",y().translate(function(e,n){var t=h.stack.length-1;return[0,50*(5-t-1)]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[0,-100]})),u.selectAll("rect.peak").data(h.topeak).exit().transition().duration(f).remove(),d.selectAll("text.peak").data(h.topeak).enter().append("text").attr("class","peak").attr("transform",y().translate(function(e,n){var t=h.stack.length-1;return[50,50*(5-t-1)+25+5]})).transition().duration(f).attr("transform",y().translate(function(e,n){return[50,-70]})).text(function(e){return e}),d.selectAll("text.peak").data(h.topeak).text(function(e){return e}),d.selectAll("text.peak").data(h.topeak).exit().transition().duration(f).remove()}function i(){u.selectAll("rect.push").data(h.topush).enter().append("rect").attr("class","push").attr("width",100).attr("height",50).attr("transform",y().translate(function(e,n){return[0,-100]})).style("opacity",0).transition().duration(f).style("opacity",1),u.selectAll("rect.push").data(h.topush).exit().transition().duration(f).remove(),d.selectAll("text.push").data(h.topush).enter().append("text").attr("class","push").attr("transform",y().translate(function(e,n){return[50,-70]})).style("opacity",0).transition().duration(f).style("opacity",1).text(function(e){return e}),d.selectAll("text.push").data(h.topush).text(function(e){return e}),d.selectAll("text.push").data(h.topush).exit().transition().duration(f).remove()}function o(){m.selectAll("rect.stack-top-high").data(h.stacktop).enter().append("rect").attr("class","stack-top-high").attr("width",100).attr("height",50).attr("transform",y().translate(function(e,n){var t=h.stack.length;return[0,50*(5-t-1)]})).style("opacity",0).transition().duration(f).style("opacity",1),m.selectAll("rect.stack-top-high").data(h.stacktop).attr("transform",y().translate(function(e,n){var t=h.stack.length;return[0,50*(5-t-1)]})),m.selectAll("rect.stack-top-high").data(h.stacktop).exit().transition().duration(f).remove()}function c(e,n){h=e,f=n}function l(e,n){c(e,n),a(),s(),r(),i(),o()}function p(){var e=this,n=g.behavior.zoom().scaleExtent([.1,10]).on("zoom",function(){e.svg.attr("transform",y().translate(g.event.translate).scale(g.event.scale))});this.svg=g.select(this.refs.svg.getDOMNode()).append("svg").call(n).append("g"),this.g=this.svg.append("g").attr("transform",y().translate(200,200).scale(1)),this.gbase=this.g.append("g").attr("class","base"),this.ghigh=this.g.append("g").attr("class","high"),this.gtext=this.g.append("g").attr("class","text"),this.gbase.append("rect").attr("class","stack").attr("width",100).attr("height",250).attr("transform",y().translate(function(e,n){return[0,-250]})).transition().duration(.75*this.props.delay).attr("transform",y().translate(function(e,n){return[0,0]})),u=this.gbase,d=this.gtext,m=this.ghigh}var u,d,m,h,f,g=t(4),y=t(9);e.exports={init:p,render:l,clear:function(){l({stack:[],topush:[],topeak:[],stacktop:[]},10)}}}});